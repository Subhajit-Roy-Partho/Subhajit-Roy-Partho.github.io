<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://subhajit-roy-partho.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://subhajit-roy-partho.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-16T00:37:32+00:00</updated><id>https://subhajit-roy-partho.github.io/feed.xml</id><title type="html">blank</title><subtitle>I am a PhD student at Petr Sulc&apos;s Lab, Arizona State University. I am currently persuing computational biophysics with focus on self assembly of genetic materials. I am highly invested in developing coarse grain model of DNA which would allow us to study these assembly at a much quicker pace, otherwise impossible with atomistic approach. I also work with Machine Learning models that could even simplify our life by predicting desired properties without even going through computationally intensive simulations where ever possible. I undertook other application based project like dna cryptography and storage. </subtitle><entry><title type="html">ARM Linux Server</title><link href="https://subhajit-roy-partho.github.io/blog/2024/ARMserver/" rel="alternate" type="text/html" title="ARM Linux Server"/><published>2024-09-07T00:00:00+00:00</published><updated>2024-09-07T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/ARMserver</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/ARMserver/"><![CDATA[<h3 id="important-notes">Important Notes</h3> <ul> <li>Welcome message is in file <code class="language-plaintext highlighter-rouge">/etc/motd</code>, and ASCII art looks great in there.</li> <li>OS choices <ol> <li>Debian</li> <li>Fedora</li> <li>Arch</li> <li>Ubuntu (May even damage firmware)</li> </ol> </li> </ul> <h3 id="useful-software">Useful Software</h3> <h5 id="desktop-environments">Desktop Environments</h5> <ul> <li>Xfce is one of the best and easy to configure desktop environment.</li> <li>To install it <code class="language-plaintext highlighter-rouge">sudo apt install xfce4</code></li> <li>to start it <code class="language-plaintext highlighter-rouge">startxfce4</code> from tty terminal.</li> </ul> <h3 id="fixes">Fixes</h3> <h5 id="slurm-gpu-segregation-fix">SLURM GPU segregation fix</h5> <p>Slurm uses nvml to detect the number of gpus, segregate them during running, and this api was not working for my case.</p> <ul> <li>Find the library location <code class="language-plaintext highlighter-rouge">sudo find / -name "libnvidia-ml.so"</code> , for my case this was <code class="language-plaintext highlighter-rouge">/usr/local/cuda-12.2/targets/sbsa-linux/lib/stubs/libnvidia-ml.so</code></li> <li>Copy this to <code class="language-plaintext highlighter-rouge">/usr/lib</code></li> <li>Add header location to <code class="language-plaintext highlighter-rouge">/etc/profile</code> , for my case it was <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">C_INCLUDE_PATH</span><span class="o">=</span><span class="s2">"/usr/local/cuda-12.2/targets/sbsa-linux/include:</span><span class="nv">$C_INCLUDE_PATH</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">CPLUS_INCLUDE_PATH</span><span class="o">=</span><span class="s2">"/usr/local/cuda-12.2/targets/sbsa-linux/include:</span><span class="nv">$CPLUS_INCLUDE_PATH</span><span class="s2">"</span>
</code></pre></div> </div> </li> <li>By default <code class="language-plaintext highlighter-rouge">/usr/lib</code> should be in ldconfig still one can add that in <code class="language-plaintext highlighter-rouge">/etc/ld.so.conf.d . sudo ldconfig</code></li> <li>Also here is a c code to check nvml, use <code class="language-plaintext highlighter-rouge">gcc nvml.c -lnvidia-ml; ./a.out</code>. If it outputs the correct number of gpu, I guess everything should be configured.</li> </ul> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;nvml.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">nvmlReturn_t</span> <span class="n">result</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">device_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// Initialize NVML library</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nvmlInit</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NVML_SUCCESS</span> <span class="o">!=</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to initialize NVML: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">nvmlErrorString</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Get the number of GPUs</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nvmlDeviceGetCount</span><span class="p">(</span><span class="o">&amp;</span><span class="n">device_count</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NVML_SUCCESS</span> <span class="o">!=</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to get device count: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">nvmlErrorString</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
        <span class="n">nvmlShutdown</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Number of GPUs detected: %u</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">device_count</span><span class="p">);</span>

    <span class="c1">// Clean up NVML library</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nvmlShutdown</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NVML_SUCCESS</span> <span class="o">!=</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to shutdown NVML: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">nvmlErrorString</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[ARM Linux Server]]></summary></entry><entry><title type="html">Mouse and Keyboard share</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Mouse-keyboard-share/" rel="alternate" type="text/html" title="Mouse and Keyboard share"/><published>2024-09-07T00:00:00+00:00</published><updated>2024-09-07T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Mouse-keyboard-share</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Mouse-keyboard-share/"><![CDATA[<ul> <li>Install it using package manager or build it from the github repo.</li> <li>Generate the self signed SSL key at <code class="language-plaintext highlighter-rouge">.local/share/barrier/SSL</code> this should be either in <code class="language-plaintext highlighter-rouge">/home/$USER</code> or <code class="language-plaintext highlighter-rouge">/home/$USER/snap/barrier-*/2</code>.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="s2">"SSL path"</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> Fingerprints
openssl req <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-days</span> 365 <span class="nt">-subj</span> /CN<span class="o">=</span>barrier <span class="nt">-newkey</span> rsa:4096 <span class="nt">-keyout</span> Barrier.pem <span class="nt">-out</span> Barrier.pem
openssl x509 <span class="nt">-fingerprint</span> <span class="nt">-sha256</span> <span class="nt">-noout</span> <span class="nt">-in</span> Barrier.pem <span class="o">&gt;</span> Fingerprints/Local.txt
<span class="nb">sed</span> <span class="nt">-e</span> <span class="s2">"s/.*=/v2:sha256:/"</span> <span class="nt">-i</span> Fingerprints/Local.txt
</code></pre></div></div> <ul> <li>Set the server config by draging in new pc to left or right.</li> <li>Start the server.</li> <li>Start the client with the server IP. If everything is right client would flash server SSL and in next message would prompt configuration is ready.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[A short description on how to share mouse and keyboard using Barrier open source software.]]></summary></entry><entry><title type="html">C++ Tips</title><link href="https://subhajit-roy-partho.github.io/blog/2024/C++/" rel="alternate" type="text/html" title="C++ Tips"/><published>2024-08-17T00:00:00+00:00</published><updated>2024-08-17T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/C++</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/C++/"><![CDATA[<h4 id="ofstream-file-opening-parameters">Ofstream file opening parameters</h4> <ul> <li><code class="language-plaintext highlighter-rouge">std::ios::ate</code> - full file is available for writting and the pointer will be at the end of the file in the beginning.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::app</code> - starts writting at the end of the file and existing porting is non writable.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::trunc</code> - will delete everything in the file and starts writting afresh.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::out</code> - used to creat a file if doesn’t exists, writting behaviour is dependant on <code class="language-plaintext highlighter-rouge">trunc</code> or <code class="language-plaintext highlighter-rouge">ate</code> etc.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::binary</code> - most useful mode to generate binary files.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[C++ Tips]]></summary></entry><entry><title type="html">Docker Commands</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Docker/" rel="alternate" type="text/html" title="Docker Commands"/><published>2024-08-17T00:00:00+00:00</published><updated>2024-08-17T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Docker</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Docker/"><![CDATA[<h3 id="run-container">Run Container</h3> <ul> <li><code class="language-plaintext highlighter-rouge">docker run --rm</code> delets the containers after the run is finished.</li> <li><code class="language-plaintext highlighter-rouge">docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi</code> - run using nvidia gpu <strong>all</strong> can be substituted with <strong>device=0</strong> to select a specific gpu.</li> </ul> <h3 id="container-commands">Container Commands</h3> <ul> <li><code class="language-plaintext highlighter-rouge">docker container ls -a</code> list all the containers</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[Docker commands]]></summary></entry><entry><title type="html">GNUplot commands</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Gnuplot/" rel="alternate" type="text/html" title="GNUplot commands"/><published>2024-06-20T00:00:00+00:00</published><updated>2024-06-20T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Gnuplot</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Gnuplot/"><![CDATA[<h4 id="plot-x-as-123-and-y-axis">Plot x as 1,2,3….. and y axis</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plot <span class="s2">"data.txt"</span> u <span class="o">(</span><span class="nv">$0</span><span class="o">)</span>:4 title <span class="s2">"Plotting with x innumeration"</span>
</code></pre></div></div> <ul> <li>($0) represents the line number.</li> </ul> <h4 id="plot-histogram">Plot histogram</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>terminal png
<span class="nb">set </span>output <span class="s1">'histogram.png'</span>
<span class="nb">set </span>style data histogram
<span class="nb">set </span>style fill solid
<span class="nb">set </span>xlabel <span class="s1">'Angles(°)'</span>
<span class="nb">set </span>ylabel <span class="s1">'Normalized Frequency'</span>
<span class="nb">set </span>title <span class="s1">'Angles distribution for α'</span>
bin_width <span class="o">=</span> 1
bin<span class="o">(</span>x, width<span class="o">)</span> <span class="o">=</span> width <span class="k">*</span> floor<span class="o">(</span>x / width<span class="o">)</span> + bin_width / 2.0
stats <span class="s1">'angles.txt'</span> nooutput
total_points <span class="o">=</span> STATS_records
plot <span class="s1">'angles.txt'</span> using <span class="o">(</span>bin<span class="o">(</span><span class="nv">$1</span>, bin_width<span class="o">))</span>:<span class="o">(</span>1.0/total_points<span class="o">)</span> smooth freq with boxes lc rgb <span class="s1">'blue'</span> notitle
</code></pre></div></div> <ul> <li>above <code class="language-plaintext highlighter-rouge">bin_width</code> controls the sampling density or width of each bin.</li> <li>dividing by <code class="language-plaintext highlighter-rouge">total_points</code> normalizes the plot, remove this for unnormalized graphs</li> <li>the input files <code class="language-plaintext highlighter-rouge">angles.txt</code> is assumed to have single column containing all the data.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="plot"/><category term="linux"/><summary type="html"><![CDATA[GNUplot useful commands]]></summary></entry><entry><title type="html">oxDNA Forcefield Development</title><link href="https://subhajit-roy-partho.github.io/blog/2024/oxDNA-forcefield-Development/" rel="alternate" type="text/html" title="oxDNA Forcefield Development"/><published>2024-06-20T00:00:00+00:00</published><updated>2024-06-20T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/oxDNA-forcefield-Development</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/oxDNA-forcefield-Development/"><![CDATA[<h2 id="forcefield-development-in-oxdna-for-cpu">Forcefield Development in oxDNA for CPU</h2>]]></content><author><name></name></author><category term="sample-posts"/><category term="plot"/><category term="linux"/><summary type="html"><![CDATA[Developing a custom forcefield in oxDNA]]></summary></entry><entry><title type="html">Software Installation and Environment Setup</title><link href="https://subhajit-roy-partho.github.io/blog/2024/cogli2-install/" rel="alternate" type="text/html" title="Software Installation and Environment Setup"/><published>2024-05-23T00:00:00+00:00</published><updated>2024-05-23T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/cogli2-install</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/cogli2-install/"><![CDATA[<h2 id="cogli-2-requirements">Cogli 2 requirements</h2> <h4 id="ubuntu-libraries">Ubuntu Libraries</h4> <ul> <li>libxrandr-dev</li> <li>libxi-dev</li> <li>libxxf86vm-dev</li> <li>libxinerama-dev</li> <li>libxcursor-dev</li> </ul> <h4 id="conda-packages">Conda packages</h4> <ul> <li>conda-forge:%3Axorg-libxxf86vm</li> </ul> <h4 id="cmake-addition-for-conda">CMAKE addition for conda</h4> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">CONDA</span><span class="p">)</span>
    <span class="n">include_directories</span><span class="p">(</span><span class="s">"~/miniconda3/include"</span><span class="p">)</span>
    <span class="n">link_directories</span><span class="p">(</span><span class="s">"~/miniconda3/lib"</span><span class="p">)</span>
<span class="n">endif</span><span class="p">(</span><span class="n">CONDA</span><span class="p">)</span>
</code></pre></div></div> <p>change the path accourding to the conda path.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="bash"/><summary type="html"><![CDATA[Software Installation and Environment Setup]]></summary></entry><entry><title type="html">Useful vim commands and shortcuts</title><link href="https://subhajit-roy-partho.github.io/blog/2024/vim-shortcut/" rel="alternate" type="text/html" title="Useful vim commands and shortcuts"/><published>2024-05-04T00:00:00+00:00</published><updated>2024-05-04T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/vim-shortcut</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/vim-shortcut/"><![CDATA[<h2 id="useful-vim-commands">Useful vim Commands</h2> <h4 id="search-and-replace">Search and Replace</h4> <ul> <li><code class="language-plaintext highlighter-rouge">:s/search/replace/</code> for current line and first occurrence.</li> <li><code class="language-plaintext highlighter-rouge">:s/search/replace/g</code> for current line and all occurrence.</li> <li><code class="language-plaintext highlighter-rouge">:%s/search/replace/g</code> for all occurance.</li> <li><code class="language-plaintext highlighter-rouge">:3,10s/search/replace/g</code> for a range of line 3 to 10</li> <li><code class="language-plaintext highlighter-rouge">:.,+4s/search/replace/g</code> from current line to next 4 lines</li> <li><code class="language-plaintext highlighter-rouge">:.,$s/search/replace/</code> from current line to end of the file.</li> <li>end <code class="language-plaintext highlighter-rouge">gc</code> to confirm each substitution.</li> <li>end <code class="language-plaintext highlighter-rouge">gi</code> to ignore case sensitivity.</li> </ul> <h4 id="comment-multiple-lines">Comment multiple lines</h4> <h4 id="fold-lines">Fold lines</h4> <p><code class="language-plaintext highlighter-rouge">:set foldmethod=indent</code> folds all the lines by indentation</p> <h2 id="installation">Installation</h2>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="bash"/><summary type="html"><![CDATA[Useful vim commands and shortcuts]]></summary></entry><entry><title type="html">Bash automation</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Bash-automation/" rel="alternate" type="text/html" title="Bash automation"/><published>2024-04-19T00:00:00+00:00</published><updated>2024-04-19T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Bash-automation</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Bash-automation/"><![CDATA[<h4 id="to-submit-multiple-replica-job-using-bash-script">To submit multiple replica job using bash script.</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">replicas</span><span class="o">=</span>6
<span class="nv">execType</span><span class="o">=</span>0

<span class="nv">program</span><span class="o">=</span><span class="s2">"oxDNA input"</span>

<span class="nb">mkdir</span> <span class="nt">-p</span> output
<span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i&lt;<span class="o">=</span>replicas<span class="p">;</span>i++<span class="o">))</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    rsync <span class="nt">-rzvP</span> main/<span class="k">*</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    <span class="nb">cd</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$execType</span><span class="s2">"</span> <span class="nt">-eq</span> 1 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nv">$program</span> <span class="o">&gt;</span>out.txt &amp;
    <span class="k">fi
    if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$execType</span><span class="s2">"</span> <span class="nt">-eq</span> 2 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>sbatch submit.sh
    <span class="k">fi
    </span><span class="nb">cd</span> ../..

<span class="k">done</span>
</code></pre></div></div> <h4 id="automatic-job-management-for-private-queue">Automatic job management for private queue</h4> <ul> <li>Create a watchdog script that needs to be executed from time to time, which will check if the jobs exists or has stopped. If stopped run a resume slurm script.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checkJob<span class="o">(){</span>
    <span class="nv">status</span><span class="o">=</span><span class="si">$(</span>squeue <span class="nt">-h</span> <span class="nt">-j</span> <span class="nv">$1</span> <span class="nt">-o</span> <span class="s2">"%T"</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$status</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"The job </span><span class="nv">$1</span><span class="s2"> has finished"</span>
        <span class="k">return </span>1<span class="p">;</span>
    <span class="k">else
        case</span> <span class="nv">$status</span> <span class="k">in</span>
        <span class="s2">"RUNNING"</span><span class="p">)</span>
            <span class="nb">echo</span> <span class="s2">"The job </span><span class="nv">$1</span><span class="s2"> is running"</span>
            <span class="k">return </span>0
            <span class="p">;;</span>
        <span class="s2">"PENDING"</span><span class="p">)</span>
            <span class="nb">echo</span> <span class="s2">"The job </span><span class="nv">$1</span><span class="s2"> is pending in queue"</span>
            <span class="k">return </span>2
            <span class="p">;;</span>
        <span class="k">*</span><span class="p">)</span>
            <span class="nb">echo</span> <span class="s2">"The job </span><span class="nv">$1</span><span class="s2"> is in: </span><span class="nv">$status</span><span class="s2">"</span>
            <span class="k">return </span>3
            <span class="p">;;</span>
        <span class="k">esac</span>
    <span class="k">fi</span>
<span class="o">}</span>

<span class="nv">curretDir</span><span class="o">=</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>

<span class="k">while </span><span class="nv">IFS</span><span class="o">=</span><span class="s2">"*"</span> <span class="nb">read</span> <span class="nt">-ra</span> p <span class="o">||</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">do
    </span>checkJob <span class="k">${</span><span class="nv">p</span><span class="p">[0]</span><span class="k">}</span>
    <span class="nv">status</span><span class="o">=</span><span class="nv">$?</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$status</span> <span class="nt">-eq</span> 1 <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"Restarting the job"</span>
        <span class="nb">cd</span> <span class="k">${</span><span class="nv">p</span><span class="p">[1]</span><span class="k">}</span>
        <span class="nb">eval</span> <span class="k">${</span><span class="nv">p</span><span class="p">[2]</span><span class="k">}</span>
    <span class="k">fi
done</span> &lt; jobs.txt
</code></pre></div></div> <ul> <li>The above script will look into a <code class="language-plaintext highlighter-rouge">jobs.txt</code> which will have the <code class="language-plaintext highlighter-rouge">process id * location of slurm script * script</code>, for example</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>15169644<span class="k">*</span>/scratch/sroy85/PHBdna2/duplex/5T/subResume.sh<span class="k">*</span><span class="s2">"sbatch subResume.sh"</span>
15080501<span class="k">*</span>/scratch/sroy85/PHBdna2/duplex/<span class="k">*</span><span class="s2">"sbatch subResume.sh"</span>
</code></pre></div></div> <ul> <li>And the resume slurm script would look like below</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="c">#SBATCH -q private</span>
<span class="c">#SBATCH -p general</span>
<span class="c">#SBATCH -G a100:1</span>
<span class="c">#SBATCH -t 5-00:00</span>
<span class="c">#SBATCH -c 20</span>
<span class="c">#SBATCH -o code.out</span>
<span class="c">#SBATCH -e code.err</span>

module load cuda-11.7.0-gcc-11.2.0 gcc-11.2.0-gcc-11.2.0 cmake eigen-3.4.0-gcc-11.2.0

<span class="nb">export </span><span class="nv">CUDA_MPS_PIPE_DIRECTORY</span><span class="o">=</span>/tmp/mps-pipe_<span class="nv">$SLURM_TASK_PID</span>
<span class="nb">export </span><span class="nv">CUDA_MPS_LOG_DIRECTORY</span><span class="o">=</span>/tmp/mps-log_<span class="nv">$SLURM_TASK_PID</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$CUDA_MPS_PIPE_DIRECTORY</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$CUDA_MPS_LOG_DIRECTORY</span>
nvidia-cuda-mps-control <span class="nt">-d</span>

<span class="nv">program</span><span class="o">=</span><span class="s2">"oxDNA input"</span>
<span class="nv">add</span><span class="o">=</span><span class="s2">"</span><span class="se">\n</span><span class="s2">refresh_vel = 0"</span>
<span class="nv">replicas</span><span class="o">=</span>6

<span class="nb">dir</span><span class="o">=(</span><span class="s2">"10T"</span>,<span class="s2">"15T"</span>,<span class="s2">"20T"</span><span class="o">)</span>
<span class="k">for </span>folder <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">dir</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">cd</span> <span class="nv">$folder</span>
    <span class="k">for</span><span class="o">((</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i&lt;<span class="o">=</span><span class="nv">$replicas</span><span class="p">;</span>i++<span class="o">))</span><span class="p">;</span> <span class="k">do
        </span><span class="nb">cd</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="nv">$add</span> <span class="o">&gt;&gt;</span> inputProd
        /scratch/sroy85/Github/oxDNA/build/bin/oxDNA inputProd <span class="o">&gt;</span>outProd.txt 2&gt;&amp;1 &amp;
        <span class="nb">cd</span> ../..
    <span class="k">done
    </span><span class="nb">cd</span> ..
<span class="k">done

</span><span class="nb">wait</span> 
</code></pre></div></div> <h4 id="to-change-an-input-parameter-like-temperature-and-running-simulation">To change an input parameter like temperature and running simulation</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">start</span><span class="o">=</span>0.11
<span class="nv">stop</span><span class="o">=</span>0.28
<span class="nv">step</span><span class="o">=</span>0.01
<span class="nv">execType</span><span class="o">=</span>1
<span class="nv">program</span><span class="o">=</span><span class="s2">"oxDNA input"</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> output
<span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">seq</span> <span class="nv">$start</span> <span class="nv">$step</span> <span class="nv">$stop</span><span class="si">)</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    rsync <span class="nt">-rzvP</span> main/<span class="k">*</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    <span class="nb">cd</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    <span class="nb">echo</span> <span class="s2">"T=</span><span class="nv">$i</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> input
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$execType</span><span class="s2">"</span> <span class="nt">-eq</span> 1 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nv">$program</span> <span class="o">&gt;</span>out.txt &amp;
    <span class="k">fi
    if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$execType</span><span class="s2">"</span> <span class="nt">-eq</span> 2 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>sbatch submit.sh
    <span class="k">fi
    </span><span class="nb">cd</span> ../..
<span class="k">done</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">originalDir</span><span class="o">=</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>
<span class="nv">folders</span><span class="o">=</span><span class="si">$(</span>find <span class="nb">.</span> <span class="nt">-maxdepth</span> 1 <span class="nt">-type</span> d<span class="si">)</span>


<span class="k">for </span><span class="nb">dir </span><span class="k">in</span> <span class="nv">$folders</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">first</span><span class="o">=</span>1
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"."</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"./plot"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        continue
    fi

    </span><span class="nb">echo</span> <span class="s2">"Entering </span><span class="nv">$dir</span><span class="s2">/output"</span>

    <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">/output"</span>
    <span class="nv">subfolders</span><span class="o">=</span><span class="si">$(</span>find <span class="nb">.</span> <span class="nt">-maxdepth</span> 1 <span class="nt">-type</span> d<span class="si">)</span>

    <span class="nb">cp</span>  <span class="nt">-rf</span> <span class="s2">"</span><span class="nv">$originalDir</span><span class="s2">/plot.gnuplot"</span> <span class="s2">"./plot.gnuplot"</span>
    <span class="nb">ls
    sed</span> <span class="nt">-i</span> <span class="s2">"s/folder/</span><span class="k">${</span><span class="nv">dir</span>:2<span class="k">}</span><span class="s2">/g"</span> <span class="s2">"./plot.gnuplot"</span>
    <span class="k">for </span>subdir <span class="k">in</span> <span class="nv">$subfolders</span><span class="p">;</span> <span class="k">do
        if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$subdir</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"."</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            continue
        fi
        if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$first</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"1"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/#plottingHere/plot '</span><span class="k">${</span><span class="nv">subdir</span>:2<span class="k">}</span><span class="se">\/</span><span class="s2">energy.ign' w l title '</span><span class="k">${</span><span class="nv">subdir</span>:2<span class="k">}</span><span class="s2">'</span><span class="se">\n</span><span class="s2">#plottingHere/g"</span> <span class="s2">"./plot.gnuplot"</span>
            <span class="nv">first</span><span class="o">=</span>0
        <span class="k">else
            </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/#plottingHere/replot '</span><span class="k">${</span><span class="nv">subdir</span>:2<span class="k">}</span><span class="se">\/</span><span class="s2">energy.ign' w l title '</span><span class="k">${</span><span class="nv">subdir</span>:2<span class="k">}</span><span class="s2">'</span><span class="se">\n</span><span class="s2">#plottingHere/g"</span> <span class="s2">"./plot.gnuplot"</span>
        <span class="k">fi
    done
    </span>gnuplot plot.gnuplot
    <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$originalDir</span><span class="s2">"</span>
    <span class="nb">echo</span> <span class="s2">""</span>
<span class="k">done</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>terminal pngcairo size 1024,768

<span class="c"># Set the output file name</span>
<span class="nb">set </span>output <span class="s1">'../../plot/folder.png'</span>

<span class="nb">set </span>logscale x
<span class="nb">set </span>yrange <span class="o">[</span>:3]
<span class="c"># Set title and labels (optional)</span>
<span class="nb">set </span>title <span class="s1">'Plot for folder'</span>
<span class="nb">set </span>xlabel <span class="s1">'X in log SU'</span>
<span class="nb">set </span>ylabel <span class="s1">'Y in linear SU'</span>

<span class="c"># Plot the data</span>
<span class="c"># Assuming the data file is named 'data.dat', and you want to plot column 1 as X and column 2 as Y</span>
<span class="c">#plottingHere</span>

<span class="c"># Unset output to finalize the file</span>
<span class="nb">unset </span>output
<span class="nb">set </span>output <span class="s1">'../../plot/folder.png'</span>
replot
<span class="nb">unset </span>output
</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="bash"/><summary type="html"><![CDATA[Automation using bash scripts, the most powerful tool in linux.]]></summary></entry><entry><title type="html">Windows Fix</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Windows-fix/" rel="alternate" type="text/html" title="Windows Fix"/><published>2024-04-13T00:00:00+00:00</published><updated>2024-04-13T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Windows-fix</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Windows-fix/"><![CDATA[<h3 id="change-time-server-for-windows">Change time server for windows</h3> <ul> <li>Open run using <code class="language-plaintext highlighter-rouge">Win+R</code></li> <li>regedit enter to open Register Editor</li> <li>Add string register for time server at <code class="language-plaintext highlighter-rouge">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\DateTime\Servers</code>.</li> <li>For sting register the header will be integer 1 2 3 … and the value would be time server address.</li> <li>Most popular time server addresses: <ul> <li>us.pool.ntp.org</li> <li>time.google.com <ul> <li>time1.google.com</li> <li>time2.google.com</li> <li>time3.google.com</li> <li>time4.google.com</li> </ul> </li> <li>time-a-g.nist.gov</li> </ul> </li> <li>The first entry (Defaults) have a integer value indicating the integer of the time server. For example if I want to set for example time.google.com as my default and if it is registered to integer 3. Then I will just change the value of the (Defaults) to 3.</li> </ul> <h2 id="references">References</h2> <ul> <li>https://www.thewindowsclub.com/change-time-server-windows-10</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="windows"/><summary type="html"><![CDATA[Simple Macbook fixes which are game changing]]></summary></entry></feed>