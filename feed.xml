<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://subhajit-roy-partho.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://subhajit-roy-partho.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-15T06:36:35+00:00</updated><id>https://subhajit-roy-partho.github.io/feed.xml</id><title type="html">blank</title><subtitle>I am a PhD student at Petr Sulc&apos;s Lab, Arizona State University. I am currently persuing computational biophysics with focus on self assembly of genetic materials. I am highly invested in developing coarse grain model of DNA which would allow us to study these assembly at a much quicker pace, otherwise impossible with atomistic approach. I also work with Machine Learning models that could even simplify our life by predicting desired properties without even going through computationally intensive simulations where ever possible. I undertook other application based project like dna cryptography and storage. </subtitle><entry><title type="html">Windows Fix</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Windows-fix/" rel="alternate" type="text/html" title="Windows Fix"/><published>2024-04-13T00:00:00+00:00</published><updated>2024-04-13T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Windows-fix</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Windows-fix/"><![CDATA[<h3 id="change-time-server-for-windows">Change time server for windows</h3> <ul> <li>Open run using <code class="language-plaintext highlighter-rouge">Win+R</code></li> <li>regedit enter to open Register Editor</li> <li>Add string register for time server at <code class="language-plaintext highlighter-rouge">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\DateTime\Servers</code>.</li> <li>For sting register the header will be integer 1 2 3 … and the value would be time server address.</li> <li>Most popular time server addresses: <ul> <li>us.pool.ntp.org</li> <li>time.google.com <ul> <li>time1.google.com</li> <li>time2.google.com</li> <li>time3.google.com</li> <li>time4.google.com</li> </ul> </li> <li>time-a-g.nist.gov</li> </ul> </li> <li>The first entry (Defaults) have a integer value indicating the integer of the time server. For example if I want to set for example time.google.com as my default and if it is registered to integer 3. Then I will just change the value of the (Defaults) to 3.</li> </ul> <h2 id="references">References</h2> <ul> <li>https://www.thewindowsclub.com/change-time-server-windows-10</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="windows"/><summary type="html"><![CDATA[Simple Macbook fixes which are game changing]]></summary></entry><entry><title type="html">Macbook Fixes</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Apple-fix/" rel="alternate" type="text/html" title="Macbook Fixes"/><published>2024-04-09T00:00:00+00:00</published><updated>2024-04-09T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Apple-fix</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Apple-fix/"><![CDATA[<h3 id="reset-macbook-network">Reset Macbook Network</h3> <ul> <li>Turn off Wi-Fi</li> <li>Open Finder &gt; From top menus select <code class="language-plaintext highlighter-rouge">GO</code> &gt; <code class="language-plaintext highlighter-rouge">Go to Folder</code></li> <li>Type <code class="language-plaintext highlighter-rouge">/Library/Preferences/SystemConfiguration</code></li> <li>Delete as many files as you can find. <ul> <li>com.apple.airport.preferences.plist</li> <li>com.apple.network.identification.plist / com.apple.network.eapoclient / configuration.plist</li> <li>com.apple.wifi.message-tracer.plist</li> <li>NetworkInterfaces.plist</li> <li>preferences.plist</li> </ul> </li> <li>Move the above files to trash and restart the system.</li> </ul> <h2 id="references">References</h2> <ul> <li>(How to Reset Network Settings on Mac - LifeWire)[https://www.lifewire.com/reset-network-settings-on-mac-5184072]</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="apple"/><category term="mac"/><summary type="html"><![CDATA[Simple Macbook fixes which are game changing]]></summary></entry><entry><title type="html">Optimization of a molecular structure using DFT calculations</title><link href="https://subhajit-roy-partho.github.io/blog/2024/QuantumOptimize/" rel="alternate" type="text/html" title="Optimization of a molecular structure using DFT calculations"/><published>2024-02-26T00:00:00+00:00</published><updated>2024-02-26T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/QuantumOptimize</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/QuantumOptimize/"><![CDATA[<p>In this project I was trying to figure out distance between two ligands bounded to a phosphate backbone of DNA with highest degree of accuracy. The ligand also contains non standard elements which motivated me to use quantum forcefields instead of classical all atoms MD simulations.</p> <ul> <li>To draw the different structures of the ligands and the DNA I use avagadro which draws them and somewhat optimizes them as well.</li> <li>This cml files are now optimized using <code class="language-plaintext highlighter-rouge">MMFF94s</code> forcefield before proceeding with calculation in GAMESS, Gaussian or any other Quantum Engines. This is carried out with the help of open babel using the following code. <code class="language-plaintext highlighter-rouge">obabel initial.cml -O optimized.cml --minimize --steps 15000 --sd --log --ff MMFF94s</code>. Here initial is the initial structure and optimized is the final output. –sd to use steepest descent algorithm –log will log all the proceding. Following all the force field that can be used:</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:<span class="se">\&gt;</span>obabel <span class="nt">-L</span> forcefields
GAFF    General Amber Force Field <span class="o">(</span>GAFF<span class="o">)</span><span class="nb">.</span>
Ghemical    Ghemical force field.
MMFF94    MMFF94 force field.
MMFF94s    MMFF94s force field.
UFF    Universal Force Field.
</code></pre></div></div> <h3 id="references">References</h3> <ul> <li>https://open-babel.readthedocs.io/en/latest/Command-line_tools/babel.html#forcefield-energy-and-minimization</li> <li>https://avogadro.cc/</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="Quantum"/><category term="CML"/><summary type="html"><![CDATA[Optimization of a molecular structure using DFT calculations]]></summary></entry><entry><title type="html">Cryosparc management</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Cryospark/" rel="alternate" type="text/html" title="Cryosparc management"/><published>2024-02-12T00:00:00+00:00</published><updated>2024-02-12T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Cryospark</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Cryospark/"><![CDATA[<h3 id="installation">Installation</h3> <ul> <li>Request a <a href="http://cryosparc.com/download">license</a>. It usually take them 2 business them to issue you a license.</li> <li>In .bashrc add <code class="language-plaintext highlighter-rouge">export LICENSE_ID="&lt;license_id&gt;"</code>.</li> <li>Download the files to desire location using</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -L https://get.cryosparc.com/download/master-latest/$LICENSE_ID -o cryosparc_master.tar.gz
curl -L https://get.cryosparc.com/download/worker-latest/$LICENSE_ID -o cryosparc_worker.tar.gz
</code></pre></div></div> <p>For Single PC setup only cryospac master is required.</p> <ul> <li>Extract the tar files using <code class="language-plaintext highlighter-rouge">tar -xzvf cryosparc_master.tar.gz</code>.</li> <li>Setup a database location, usually for clusters scratch space is best for example <code class="language-plaintext highlighter-rouge">/scratch/cryo/cryoDB</code>.</li> <li>Go to the extracted folder then install using <code class="language-plaintext highlighter-rouge">./install.sh --license $LICENSE_ID --hostname hostname --dbpath /scratch/cryo/cryoDB --port 61000</code>.</li> </ul> <p>The hostname can be obtained by typing <code class="language-plaintext highlighter-rouge">hostname</code>. In cluster system this will change depending upon the node allocation. In such situation the nodename needs to be updated in <code class="language-plaintext highlighter-rouge">config.sh</code>. Also adding <code class="language-plaintext highlighter-rouge">export CRYOSPARC_FORCE_HOSTNAME=true</code> to config.sh could also help.</p> <ul> <li>Start the cryosparc using <code class="language-plaintext highlighter-rouge">bin/cryosparcm start</code>. First time it will take some time to configure, from next time it would be fast.</li> <li>Create the user using <code class="language-plaintext highlighter-rouge">bin/cryosparcm createuser --email "email@email.com" --username "user1" --firstname "user" --lastname "1" --password "somepass"</code></li> <li>Elevate user permission to admin using <code class="language-plaintext highlighter-rouge">cryosparcm updateuser --email "&lt;email address&gt;" --admin "true"</code>.</li> <li>Now cryosparc is ready for use at port 61000. To open a <code class="language-plaintext highlighter-rouge">ssh port use ssh -N -L 61000:cg001.sol.asu.edu:61000 user@sol.asu.edu</code> where cg001 is the id of the compute node in the cluster. If it is a personal computer this step can be ignored.</li> <li>Access the cryosparc in the browser at localhost:61000</li> </ul> <h3 id="references">References</h3> <ul> <li>https://guide.cryosparc.com/setup-configuration-and-management/how-to-download-install-and-configure/downloading-and-installing-cryosparc</li> <li>https://discuss.cryosparc.com/t/no-admin-account-upon-install-create-admin-account-via-cli/10530/2</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="Cryo"/><category term="TEM"/><summary type="html"><![CDATA[Installation and management of Cryosparc]]></summary></entry><entry><title type="html">Useful bash commands and functions</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Bash-commands/" rel="alternate" type="text/html" title="Useful bash commands and functions"/><published>2024-02-12T00:00:00+00:00</published><updated>2024-02-12T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Bash-commands</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Bash-commands/"><![CDATA[<h2 id="alias">Alias</h2> <p><code class="language-plaintext highlighter-rouge">alias md=mkdir</code></p> <h2 id="settings-bashrc">Settings bashrc</h2> <p><code class="language-plaintext highlighter-rouge">shopt -s autocd</code></p> <h2 id="important-functions">Important functions</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server<span class="o">(){</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span><span class="k">then
        </span>ssh <span class="nt">-CX</span> user@serverIP
    <span class="k">elif</span> <span class="o">[</span> <span class="nv">$1</span> <span class="o">=</span> <span class="s2">"port"</span> <span class="o">]</span><span class="p">;</span><span class="k">then
        if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$4</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span><span class="k">then
            </span>ssh <span class="nt">-N</span> <span class="nt">-L</span> <span class="nv">$2</span>:<span class="nv">$3</span>.serverIP:<span class="nv">$2</span> user@serverIP
        <span class="k">else
            </span>ssh <span class="nt">-N</span> <span class="nt">-L</span> <span class="nv">$2</span>:<span class="nv">$3</span>.serverIP:<span class="nv">$4</span> user@serverIP
        <span class="k">fi
    elif</span> <span class="o">[</span> <span class="nv">$1</span> <span class="o">=</span> <span class="s2">"send"</span> <span class="o">]</span><span class="p">;</span><span class="k">then
        </span>rsync <span class="nt">-rzvP</span> <span class="nv">$2</span> user@serverIP:<span class="nv">$3</span>
    <span class="k">elif</span> <span class="o">[</span> <span class="nv">$1</span> <span class="o">=</span> <span class="s2">"receive"</span> <span class="o">]</span><span class="p">;</span><span class="k">then
        </span>rsync <span class="nt">-rzvP</span> user@serverIP:<span class="nv">$2</span> <span class="nv">$3</span>
    <span class="k">else
        </span>ssh user@serverIP <span class="nv">$1</span>
    <span class="k">fi</span>
<span class="o">}</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">server</code> will just log you in</li> <li><code class="language-plaintext highlighter-rouge">server send yourLocation serverLocation</code> sends file to the server.</li> <li><code class="language-plaintext highlighter-rouge">server receive serverLocation yourLocation</code> downloads the files from server.</li> <li>replace <code class="language-plaintext highlighter-rouge">server</code> with your server name, <code class="language-plaintext highlighter-rouge">user</code> to your user id, <code class="language-plaintext highlighter-rouge">serverIP</code> with the ip of the server.</li> <li>To execute commands just server “command”. Few useful commands</li> <li><code class="language-plaintext highlighter-rouge">server myjobs</code> - to see running jobs</li> <li><code class="language-plaintext highlighter-rouge">server "cat file"</code> - see a file</li> <li><code class="language-plaintext highlighter-rouge">server "tail file"</code> - last few lines of file, useful for log files.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>asu<span class="o">(){</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span><span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"password</span><span class="se">\n</span><span class="s2">push</span><span class="se">\n</span><span class="s2">"</span>|sudo openconnect <span class="nt">-u</span> user <span class="nt">--server</span><span class="o">=</span>sslvpn.asu.edu
    <span class="k">elif</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-eq</span> 1 <span class="o">]</span><span class="p">;</span><span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"password</span><span class="se">\n</span><span class="nv">$1</span><span class="se">\n</span><span class="s2">"</span>|sudo openconnect <span class="nt">-u</span> user <span class="nt">--server</span><span class="o">=</span>sslvpn.asu.edu
    <span class="k">else
        </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="se">\n</span><span class="nv">$2</span><span class="se">\n</span><span class="s2">"</span>|sudo openconnect <span class="nt">-u</span> user <span class="nt">--server</span><span class="o">=</span>sslvpn.asu.edu
    <span class="k">fi</span>
<span class="o">}</span>
</code></pre></div></div> <p>or</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nb">alias </span>asu <span class="o">=</span> <span class="s1">'echo "password\npush"|sudo openconnect -u user --server=sslvpn.asu.edu'</span>
</code></pre></div></div> <ul> <li>first function only works with zsh, for bash use the 2nd one.</li> <li>to sign in to asu network using terminal and openconnect with push authentication.</li> <li>the above method is unsecure as the password is kept in the bashrc or zshrc file.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gi<span class="o">(){</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span><span class="k">then
        </span>git pull<span class="p">;</span> git add .<span class="p">;</span> git commit <span class="nt">-m</span> <span class="s2">"update"</span><span class="p">;</span> git push<span class="p">;</span>
    <span class="k">elif</span> <span class="o">[</span> <span class="nv">$1</span> <span class="o">=</span> <span class="s2">"commit"</span> <span class="o">]</span><span class="p">;</span><span class="k">then
        </span>git add .<span class="p">;</span> git commit <span class="nt">-m</span> <span class="nv">$2</span><span class="p">;</span> git push
    <span class="k">elif</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-eq</span> 1]<span class="p">;</span><span class="k">then
        </span>git clone <span class="nv">$1</span>
    <span class="k">fi</span>
<span class="o">}</span>
</code></pre></div></div> <ul> <li>short function to do git stuff.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">ninjabuild</span><span class="o">=</span><span class="s2">"cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release; ninja -j 30"</span>
</code></pre></div></div> <ul> <li>quick compilation for programs using cmake.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checkJob<span class="o">(){</span>
    <span class="nv">status</span><span class="o">=</span><span class="si">$(</span>squeue <span class="nt">-h</span> <span class="nt">-j</span> <span class="nv">$1</span> <span class="nt">-o</span> <span class="s2">"%T"</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$status</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s2">"The job </span><span class="nv">$1</span><span class="s2"> has finished"</span>
        <span class="k">return </span>1<span class="p">;</span>
    <span class="k">else
        case</span> <span class="nv">$status</span> <span class="k">in</span> 
        <span class="s2">"RUNNING"</span><span class="p">)</span>
            <span class="nb">echo</span> <span class="s2">"The job </span><span class="nv">$1</span><span class="s2"> is running"</span>
            <span class="k">return </span>0
            <span class="p">;;</span>
        <span class="s2">"PENDING"</span><span class="p">)</span>
            <span class="nb">echo</span> <span class="s2">"The job </span><span class="nv">$1</span><span class="s2"> is pending in queue"</span>
            <span class="k">return </span>2
            <span class="p">;;</span>
        <span class="k">*</span><span class="p">)</span>
            <span class="nb">echo</span> <span class="s2">"The job </span><span class="nv">$1</span><span class="s2"> is in: </span><span class="nv">$status</span><span class="s2">"</span>
            <span class="k">return </span>3
            <span class="p">;;</span>
        <span class="k">esac</span>
    <span class="k">fi</span>
<span class="o">}</span>
</code></pre></div></div> <ul> <li>above function check the status of a job given the jobid as input</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">kill</span> <span class="si">$(</span>ps aux | <span class="nb">grep</span> <span class="s2">"program Name"</span>| <span class="nb">grep</span> <span class="s2">"2nd cond if needed"</span> | <span class="nb">awk</span> <span class="s1">'{print $2}'</span><span class="si">)</span>
</code></pre></div></div> <ul> <li>above function will kill all the jobs with condition within grep. This is very useful command to kill all the jobs with a specific keywords.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-type</span> f <span class="nt">-exec</span> <span class="nb">touch</span> <span class="nt">--no-create</span> <span class="o">{}</span> +
</code></pre></div></div> <ul> <li>updates timestamp of all the files, this is useful to preserve files where there is automatic file deletion sytem for older files.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>file1 file2 <span class="o">&gt;</span> file3
</code></pre></div></div> <ul> <li>the above will merge content of file1 and file2 to file 3. Single <code class="language-plaintext highlighter-rouge">&gt;</code> will replace content in file3 while <code class="language-plaintext highlighter-rouge">&gt;&gt;</code> will append content to file3.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="bash"/><summary type="html"><![CDATA[Useful bashrc commands that I require to write every time I create a new system.]]></summary></entry><entry><title type="html">All atoms simulation for DNA</title><link href="https://subhajit-roy-partho.github.io/blog/2024/DNA-allAtoms/" rel="alternate" type="text/html" title="All atoms simulation for DNA"/><published>2024-02-12T00:00:00+00:00</published><updated>2024-02-12T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/DNA-allAtoms</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/DNA-allAtoms/"><![CDATA[<h3 id="system-setup-using-amber">System setup using Amber</h3> <ul> <li>Generate the structure of DNA using tools like NAB, CHIMERA etc.</li> <li>Generate the ligand structure using GaussView or Avogardo2</li> <li>Run antechamber to obtain amber suitable structure as prepi or mol2 (mol2 is a preferred format). Then parmchk2 to convert it to simulation format interaction.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>antechamber <span class="nt">-fi</span> pdb <span class="nt">-fo</span> prepi <span class="nt">-i</span> ligand.pdb <span class="nt">-o</span> ligand.prepi <span class="nt">-rn</span> LIG <span class="nt">-c</span> bcc <span class="nt">-at</span> gaff2
parmchk2 <span class="nt">-f</span> prepi <span class="nt">-i</span> ligand.prepi <span class="nt">-o</span> ligand.frcmod
</code></pre></div></div> <ul> <li>Add the dna, ligand and protein using tleap.</li> <li>Execute a tleap file using <code class="language-plaintext highlighter-rouge">tleap -s -f tleap.in &gt; out.txt </code></li> </ul> <h3 id="amber">Amber</h3> <ul> <li>location of leaprc files $AMBERHOME/dat/leap/cmd</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="bash"/><summary type="html"><![CDATA[All atoms simulation tutorial for DNA]]></summary></entry><entry><title type="html">Pacman</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Pacman/" rel="alternate" type="text/html" title="Pacman"/><published>2024-02-12T00:00:00+00:00</published><updated>2024-02-12T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Pacman</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Pacman/"><![CDATA[<ul> <li>install <code class="language-plaintext highlighter-rouge">pacman -S package</code></li> <li>clean all cache <code class="language-plaintext highlighter-rouge">pacman -Scc</code></li> <li>complete uninstall of package <code class="language-plaintext highlighter-rouge">pacman -Rcns package</code></li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="arch"/><summary type="html"><![CDATA[All atoms simulation tutorial for DNA]]></summary></entry><entry><title type="html">Bash automation</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Bash-automation/" rel="alternate" type="text/html" title="Bash automation"/><published>2024-02-12T00:00:00+00:00</published><updated>2024-02-12T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Bash-automation</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Bash-automation/"><![CDATA[<h4 id="to-submit-multiple-replica-job-using-bash-script">To submit multiple replica job using bash script.</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">replicas</span><span class="o">=</span>6
<span class="nv">execType</span><span class="o">=</span>0

<span class="nv">program</span><span class="o">=</span><span class="s2">"oxDNA input"</span>

<span class="nb">mkdir</span> <span class="nt">-p</span> output
<span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i&lt;<span class="o">=</span>replicas<span class="p">;</span>i++<span class="o">))</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    rsync <span class="nt">-rzvP</span> main/<span class="k">*</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    <span class="nb">cd</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$execType</span><span class="s2">"</span> <span class="nt">-eq</span> 1 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nv">$program</span> <span class="o">&gt;</span>out.txt &amp;
    <span class="k">fi
    if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$execType</span><span class="s2">"</span> <span class="nt">-eq</span> 2 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>sbatch submit.sh
    <span class="k">fi
    </span><span class="nb">cd</span> ../..

<span class="k">done</span>
</code></pre></div></div> <h4 id="check-living-status-of-job-if-not-resubmit-it">Check living status of job if not resubmit it</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div> <h4 id="to-change-an-input-parameter-like-temperature-and-running-simulation">To change an input parameter like temperature and running simulation</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">start</span><span class="o">=</span>0.11
<span class="nv">stop</span><span class="o">=</span>0.28
<span class="nv">step</span><span class="o">=</span>0.01
<span class="nv">execType</span><span class="o">=</span>1
<span class="nv">program</span><span class="o">=</span><span class="s2">"oxDNA input"</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> output
<span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">seq</span> <span class="nv">$start</span> <span class="nv">$step</span> <span class="nv">$stop</span><span class="si">)</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    rsync <span class="nt">-rzvP</span> main/<span class="k">*</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    <span class="nb">cd</span> <span class="s2">"output/</span><span class="nv">$i</span><span class="s2">"</span>
    <span class="nb">echo</span> <span class="s2">"T=</span><span class="nv">$i</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> input
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$execType</span><span class="s2">"</span> <span class="nt">-eq</span> 1 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nv">$program</span> <span class="o">&gt;</span>out.txt &amp;
    <span class="k">fi
    if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$execType</span><span class="s2">"</span> <span class="nt">-eq</span> 2 <span class="o">]</span><span class="p">;</span> <span class="k">then
        </span>sbatch submit.sh
    <span class="k">fi
    </span><span class="nb">cd</span> ../..
<span class="k">done</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">originalDir</span><span class="o">=</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>
<span class="nv">folders</span><span class="o">=</span><span class="si">$(</span>find <span class="nb">.</span> <span class="nt">-maxdepth</span> 1 <span class="nt">-type</span> d<span class="si">)</span>


<span class="k">for </span><span class="nb">dir </span><span class="k">in</span> <span class="nv">$folders</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">first</span><span class="o">=</span>1
    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"."</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"./plot"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
        continue
    fi

    </span><span class="nb">echo</span> <span class="s2">"Entering </span><span class="nv">$dir</span><span class="s2">/output"</span>

    <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">/output"</span>
    <span class="nv">subfolders</span><span class="o">=</span><span class="si">$(</span>find <span class="nb">.</span> <span class="nt">-maxdepth</span> 1 <span class="nt">-type</span> d<span class="si">)</span>

    <span class="nb">cp</span>  <span class="nt">-rf</span> <span class="s2">"</span><span class="nv">$originalDir</span><span class="s2">/plot.gnuplot"</span> <span class="s2">"./plot.gnuplot"</span>
    <span class="nb">ls
    sed</span> <span class="nt">-i</span> <span class="s2">"s/folder/</span><span class="k">${</span><span class="nv">dir</span>:2<span class="k">}</span><span class="s2">/g"</span> <span class="s2">"./plot.gnuplot"</span>
    <span class="k">for </span>subdir <span class="k">in</span> <span class="nv">$subfolders</span><span class="p">;</span> <span class="k">do
        if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$subdir</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"."</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            continue
        fi
        if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$first</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"1"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
            </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/#plottingHere/plot '</span><span class="k">${</span><span class="nv">subdir</span>:2<span class="k">}</span><span class="se">\/</span><span class="s2">energy.ign' w l title '</span><span class="k">${</span><span class="nv">subdir</span>:2<span class="k">}</span><span class="s2">'</span><span class="se">\n</span><span class="s2">#plottingHere/g"</span> <span class="s2">"./plot.gnuplot"</span>
            <span class="nv">first</span><span class="o">=</span>0
        <span class="k">else
            </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/#plottingHere/replot '</span><span class="k">${</span><span class="nv">subdir</span>:2<span class="k">}</span><span class="se">\/</span><span class="s2">energy.ign' w l title '</span><span class="k">${</span><span class="nv">subdir</span>:2<span class="k">}</span><span class="s2">'</span><span class="se">\n</span><span class="s2">#plottingHere/g"</span> <span class="s2">"./plot.gnuplot"</span>
        <span class="k">fi
    done
    </span>gnuplot plot.gnuplot
    <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$originalDir</span><span class="s2">"</span>
    <span class="nb">echo</span> <span class="s2">""</span>
<span class="k">done</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>terminal pngcairo size 1024,768

<span class="c"># Set the output file name</span>
<span class="nb">set </span>output <span class="s1">'../../plot/folder.png'</span>

<span class="nb">set </span>logscale x
<span class="nb">set </span>yrange <span class="o">[</span>:3]
<span class="c"># Set title and labels (optional)</span>
<span class="nb">set </span>title <span class="s1">'Plot for folder'</span>
<span class="nb">set </span>xlabel <span class="s1">'X in log SU'</span>
<span class="nb">set </span>ylabel <span class="s1">'Y in linear SU'</span>

<span class="c"># Plot the data</span>
<span class="c"># Assuming the data file is named 'data.dat', and you want to plot column 1 as X and column 2 as Y</span>
<span class="c">#plottingHere</span>

<span class="c"># Unset output to finalize the file</span>
<span class="nb">unset </span>output
<span class="nb">set </span>output <span class="s1">'../../plot/folder.png'</span>
replot
<span class="nb">unset </span>output
</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="bash"/><summary type="html"><![CDATA[Automation using bash scripts, the most powerful tool in linux.]]></summary></entry><entry><title type="html">Disk Management</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Gparted-cli/" rel="alternate" type="text/html" title="Disk Management"/><published>2024-01-23T00:00:00+00:00</published><updated>2024-01-23T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Gparted-cli</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Gparted-cli/"><![CDATA[<p>Useful parted cli commands:</p> <ul> <li><code class="language-plaintext highlighter-rouge">print</code> - print the full configuration.</li> <li><code class="language-plaintext highlighter-rouge">select DEVICE</code> - to change to a different device and edit it.</li> <li><code class="language-plaintext highlighter-rouge">mklabel gpt</code> - to create a gpt label for the partition</li> <li><code class="language-plaintext highlighter-rouge">mkpart primary btrfs 1MiB 100%</code> - to create a partition of type primary with format btrfs starting at 1MiB and ending at 100% or end of the disk.</li> <li> <p>`` Useful other disk management commands:</p> </li> <li><code class="language-plaintext highlighter-rouge">lsblk</code> and <code class="language-plaintext highlighter-rouge">fdisk -l</code> shows disk configuration for all the disks.</li> <li><code class="language-plaintext highlighter-rouge">sudo mkfs.btrfs -f /dev/sda1</code> to create the final btrfs partition for sda1 partition. This is not always needed if parted does it by default.</li> <li><code class="language-plaintext highlighter-rouge">sudo blkid</code> to obtain all the uuid of the disks.</li> <li><code class="language-plaintext highlighter-rouge">/etc/fstab</code> fstab file needs to be appended with the new partition configuration if one wants to mount the partition automatically during restart.</li> </ul> <p>Validate settings:</p> <ul> <li><code class="language-plaintext highlighter-rouge">df -h</code> to show all the mount location.</li> </ul> <p>User management:</p> <ul> <li><code class="language-plaintext highlighter-rouge">sudo useradd -m -d /home/subho -s /bin/bash -G standard,admin subho</code> to add user subho with home location /home/subho, default shell as bash and add to group standard,admin.</li> <li><code class="language-plaintext highlighter-rouge">sudo passwd subho</code> to change or create password for user subho.</li> </ul> <h3 id="conclusion">Conclusion</h3> <p>parted cli is the most powerful partition tool available for terminal user. Meticious use could help save lot of time.</p> <h3 id="references">References</h3> <ul> <li>https://www.redhat.com/sysadmin/resize-lvm-simple</li> <li>https://kb.vander.host/disk-management/how-to-resize-expand-an-ubuntu-lvm-disk/</li> <li>https://fedoramagazine.org/choose-between-btrfs-and-lvm-ext4/</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="disk"/><category term="partitions"/><summary type="html"><![CDATA[Useful disk management commands]]></summary></entry><entry><title type="html">LVM management</title><link href="https://subhajit-roy-partho.github.io/blog/2024/LVM-disk/" rel="alternate" type="text/html" title="LVM management"/><published>2024-01-15T00:00:00+00:00</published><updated>2024-01-15T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/LVM-disk</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/LVM-disk/"><![CDATA[<p>I will discuss basic operation that might be helpful.</p> <ol> <li>Extend partition size for a LVM partitons.</li> </ol> <p>Check disk configuration using the following commands <code class="language-plaintext highlighter-rouge">fdisk -l</code>, <code class="language-plaintext highlighter-rouge">lsblk</code>, <code class="language-plaintext highlighter-rouge">vds</code>, <code class="language-plaintext highlighter-rouge">pvs</code>. To make changes to the virtual partition one need to change the /dev/mapper section no need to change any properties of /dev/sd* or /dev/nvme*. Using <code class="language-plaintext highlighter-rouge">lvextend --size *size*G /dev/mapper/*partitionName*</code> for my case this was <code class="language-plaintext highlighter-rouge">lvextend --size 236G /dev/mapper/ubuntu--vg-ubuntu--lv</code>. Now update the filesystem <code class="language-plaintext highlighter-rouge">resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv</code>. Using <code class="language-plaintext highlighter-rouge">df -h \ </code> one can verify if the changes have been implemented.</p> <h3 id="conclusion">Conclusion</h3> <p>LVM is great tool for those who are looking forward to robust but less fancy dynamic partition management system. BTRFS is much simplier and easier to implement but CPU usage can rise compared to LVM-ext4, hence many prefer LVM for server systems.</p> <h3 id="references">References</h3> <ul> <li>https://www.redhat.com/sysadmin/resize-lvm-simple</li> <li>https://kb.vander.host/disk-management/how-to-resize-expand-an-ubuntu-lvm-disk/</li> <li>https://fedoramagazine.org/choose-between-btrfs-and-lvm-ext4/</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="disk"/><category term="partitions"/><summary type="html"><![CDATA[Handling LVM partitions]]></summary></entry></feed>