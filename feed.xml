<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://subhajit-roy-partho.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://subhajit-roy-partho.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-09T22:16:52+00:00</updated><id>https://subhajit-roy-partho.github.io/feed.xml</id><title type="html">blank</title><subtitle>I am a PhD student at Petr Sulc&apos;s Lab, Arizona State University. I am currently persuing computational biophysics with focus on self assembly of genetic materials. I am highly invested in developing coarse grain model of DNA which would allow us to study these assembly at a much quicker pace, otherwise impossible with atomistic approach. I also work with Machine Learning models that could even simplify our life by predicting desired properties without even going through computationally intensive simulations where ever possible. I undertook other application based project like dna cryptography and storage. </subtitle><entry><title type="html">All atom MD simulation of DNA with small molecule</title><link href="https://subhajit-roy-partho.github.io/blog/2024/all-atom-DNA-simulation/" rel="alternate" type="text/html" title="All atom MD simulation of DNA with small molecule"/><published>2024-10-01T00:00:00+00:00</published><updated>2024-10-01T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/all-atom-DNA-simulation</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/all-atom-DNA-simulation/"><![CDATA[<h2 id="avogadro">Avogadro</h2>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[A description on how to simulate DNA duplex with small molecules covalently attached at different positions]]></summary></entry><entry><title type="html">ARM Linux Server</title><link href="https://subhajit-roy-partho.github.io/blog/2024/ARMserver/" rel="alternate" type="text/html" title="ARM Linux Server"/><published>2024-09-07T00:00:00+00:00</published><updated>2024-09-07T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/ARMserver</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/ARMserver/"><![CDATA[<h3 id="important-notes">Important Notes</h3> <ul> <li>Welcome message is in file <code class="language-plaintext highlighter-rouge">/etc/motd</code>, and ASCII art looks great in there.</li> <li>OS choices <ol> <li>Debian</li> <li>Fedora</li> <li>Arch</li> <li>Ubuntu (May even damage firmware)</li> </ol> </li> </ul> <h3 id="useful-software">Useful Software</h3> <h5 id="desktop-environments">Desktop Environments</h5> <ul> <li>Xfce is one of the best and easy to configure desktop environment.</li> <li>To install it <code class="language-plaintext highlighter-rouge">sudo apt install xfce4</code></li> <li>to start it <code class="language-plaintext highlighter-rouge">startxfce4</code> from tty terminal.</li> </ul> <h3 id="fixes">Fixes</h3> <h5 id="slurm-gpu-segregation-fix">SLURM GPU segregation fix</h5> <p>Slurm uses nvml to detect the number of gpus, segregate them during running, and this api was not working for my case.</p> <ul> <li>Find the library location <code class="language-plaintext highlighter-rouge">sudo find / -name "libnvidia-ml.so"</code> , for my case this was <code class="language-plaintext highlighter-rouge">/usr/local/cuda-12.2/targets/sbsa-linux/lib/stubs/libnvidia-ml.so</code></li> <li>Copy this to <code class="language-plaintext highlighter-rouge">/usr/lib</code></li> <li>Add header location to <code class="language-plaintext highlighter-rouge">/etc/profile</code> , for my case it was <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">C_INCLUDE_PATH</span><span class="o">=</span><span class="s2">"/usr/local/cuda-12.2/targets/sbsa-linux/include:</span><span class="nv">$C_INCLUDE_PATH</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">CPLUS_INCLUDE_PATH</span><span class="o">=</span><span class="s2">"/usr/local/cuda-12.2/targets/sbsa-linux/include:</span><span class="nv">$CPLUS_INCLUDE_PATH</span><span class="s2">"</span>
</code></pre></div> </div> </li> <li>By default <code class="language-plaintext highlighter-rouge">/usr/lib</code> should be in ldconfig still one can add that in <code class="language-plaintext highlighter-rouge">/etc/ld.so.conf.d . sudo ldconfig</code></li> <li>Also here is a c code to check nvml, use <code class="language-plaintext highlighter-rouge">gcc nvml.c -lnvidia-ml; ./a.out</code>. If it outputs the correct number of gpu, I guess everything should be configured.</li> </ul> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;nvml.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">nvmlReturn_t</span> <span class="n">result</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">device_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// Initialize NVML library</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nvmlInit</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NVML_SUCCESS</span> <span class="o">!=</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to initialize NVML: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">nvmlErrorString</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Get the number of GPUs</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nvmlDeviceGetCount</span><span class="p">(</span><span class="o">&amp;</span><span class="n">device_count</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NVML_SUCCESS</span> <span class="o">!=</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to get device count: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">nvmlErrorString</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
        <span class="n">nvmlShutdown</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Number of GPUs detected: %u</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">device_count</span><span class="p">);</span>

    <span class="c1">// Clean up NVML library</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nvmlShutdown</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NVML_SUCCESS</span> <span class="o">!=</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to shutdown NVML: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">nvmlErrorString</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[ARM Linux Server]]></summary></entry><entry><title type="html">Mouse and Keyboard share</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Mouse-keyboard-share/" rel="alternate" type="text/html" title="Mouse and Keyboard share"/><published>2024-09-07T00:00:00+00:00</published><updated>2024-09-07T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Mouse-keyboard-share</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Mouse-keyboard-share/"><![CDATA[<ul> <li>Install it using package manager or build it from the github repo.</li> <li>Generate the self signed SSL key at <code class="language-plaintext highlighter-rouge">.local/share/barrier/SSL</code> this should be either in <code class="language-plaintext highlighter-rouge">/home/$USER</code> or <code class="language-plaintext highlighter-rouge">/home/$USER/snap/barrier-*/2</code>.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="s2">"SSL path"</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> Fingerprints
openssl req <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-days</span> 365 <span class="nt">-subj</span> /CN<span class="o">=</span>barrier <span class="nt">-newkey</span> rsa:4096 <span class="nt">-keyout</span> Barrier.pem <span class="nt">-out</span> Barrier.pem
openssl x509 <span class="nt">-fingerprint</span> <span class="nt">-sha256</span> <span class="nt">-noout</span> <span class="nt">-in</span> Barrier.pem <span class="o">&gt;</span> Fingerprints/Local.txt
<span class="nb">sed</span> <span class="nt">-e</span> <span class="s2">"s/.*=/v2:sha256:/"</span> <span class="nt">-i</span> Fingerprints/Local.txt
</code></pre></div></div> <ul> <li>Set the server config by draging in new pc to left or right.</li> <li>Start the server.</li> <li>Start the client with the server IP. If everything is right client would flash server SSL and in next message would prompt configuration is ready.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[A short description on how to share mouse and keyboard using Barrier open source software.]]></summary></entry><entry><title type="html">ZSH initial setup</title><link href="https://subhajit-roy-partho.github.io/blog/2024/zsh/" rel="alternate" type="text/html" title="ZSH initial setup"/><published>2024-09-07T00:00:00+00:00</published><updated>2024-09-07T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/zsh</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/zsh/"><![CDATA[<h2 id="zsh">ZSH</h2> <ul> <li>Install oh-my-zsh <code class="language-plaintext highlighter-rouge">sh -c "$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"</code></li> <li>Update in ~/.zshrc file</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">"avit"</span>
<span class="nv">plugins</span><span class="o">=(</span>
  git
  zsh-syntax-highlighting
  zsh-autosuggestions
  zsh-history-substring-search
<span class="o">)</span>
</code></pre></div></div> <ul> <li> <p>Install syntax-highlight using <code class="language-plaintext highlighter-rouge">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code></p> </li> <li> <p>Install autosuggestion using <code class="language-plaintext highlighter-rouge">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code></p> </li> <li> <p>Install zsh history substring search ` git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search`</p> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[A short description on how to share mouse and keyboard using Barrier open source software.]]></summary></entry><entry><title type="html">C++ Tips</title><link href="https://subhajit-roy-partho.github.io/blog/2024/C++/" rel="alternate" type="text/html" title="C++ Tips"/><published>2024-08-17T00:00:00+00:00</published><updated>2024-08-17T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/C++</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/C++/"><![CDATA[<h4 id="ofstream-file-opening-parameters">Ofstream file opening parameters</h4> <ul> <li><code class="language-plaintext highlighter-rouge">std::ios::ate</code> - full file is available for writting and the pointer will be at the end of the file in the beginning.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::app</code> - starts writting at the end of the file and existing porting is non writable.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::trunc</code> - will delete everything in the file and starts writting afresh.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::out</code> - used to creat a file if doesn’t exists, writting behaviour is dependant on <code class="language-plaintext highlighter-rouge">trunc</code> or <code class="language-plaintext highlighter-rouge">ate</code> etc.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::binary</code> - most useful mode to generate binary files.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[C++ Tips]]></summary></entry><entry><title type="html">Docker Commands</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Docker/" rel="alternate" type="text/html" title="Docker Commands"/><published>2024-08-17T00:00:00+00:00</published><updated>2024-08-17T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Docker</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Docker/"><![CDATA[<h3 id="run-container">Run Container</h3> <ul> <li><code class="language-plaintext highlighter-rouge">docker run --rm</code> delets the containers after the run is finished.</li> <li><code class="language-plaintext highlighter-rouge">docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi</code> - run using nvidia gpu <strong>all</strong> can be substituted with <strong>device=0</strong> to select a specific gpu.</li> </ul> <h3 id="container-commands">Container Commands</h3> <ul> <li><code class="language-plaintext highlighter-rouge">docker container ls -a</code> list all the containers</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[Docker commands]]></summary></entry><entry><title type="html">GNUplot commands</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Gnuplot/" rel="alternate" type="text/html" title="GNUplot commands"/><published>2024-06-20T00:00:00+00:00</published><updated>2024-06-20T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Gnuplot</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Gnuplot/"><![CDATA[<h4 id="plot-x-as-123-and-y-axis">Plot x as 1,2,3….. and y axis</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plot <span class="s2">"data.txt"</span> u <span class="o">(</span><span class="nv">$0</span><span class="o">)</span>:4 title <span class="s2">"Plotting with x innumeration"</span>
</code></pre></div></div> <ul> <li>($0) represents the line number.</li> </ul> <h4 id="plot-histogram">Plot histogram</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>terminal png
<span class="nb">set </span>output <span class="s1">'histogram.png'</span>
<span class="nb">set </span>style data histogram
<span class="nb">set </span>style fill solid
<span class="nb">set </span>xlabel <span class="s1">'Angles(°)'</span>
<span class="nb">set </span>ylabel <span class="s1">'Normalized Frequency'</span>
<span class="nb">set </span>title <span class="s1">'Angles distribution for α'</span>
bin_width <span class="o">=</span> 1
bin<span class="o">(</span>x, width<span class="o">)</span> <span class="o">=</span> width <span class="k">*</span> floor<span class="o">(</span>x / width<span class="o">)</span> + bin_width / 2.0
stats <span class="s1">'angles.txt'</span> nooutput
total_points <span class="o">=</span> STATS_records
plot <span class="s1">'angles.txt'</span> using <span class="o">(</span>bin<span class="o">(</span><span class="nv">$1</span>, bin_width<span class="o">))</span>:<span class="o">(</span>1.0/total_points<span class="o">)</span> smooth freq with boxes lc rgb <span class="s1">'blue'</span> notitle
</code></pre></div></div> <ul> <li>above <code class="language-plaintext highlighter-rouge">bin_width</code> controls the sampling density or width of each bin.</li> <li>dividing by <code class="language-plaintext highlighter-rouge">total_points</code> normalizes the plot, remove this for unnormalized graphs</li> <li>the input files <code class="language-plaintext highlighter-rouge">angles.txt</code> is assumed to have single column containing all the data.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="plot"/><category term="linux"/><summary type="html"><![CDATA[GNUplot useful commands]]></summary></entry><entry><title type="html">oxDNA Forcefield Development</title><link href="https://subhajit-roy-partho.github.io/blog/2024/oxDNA-forcefield-Development/" rel="alternate" type="text/html" title="oxDNA Forcefield Development"/><published>2024-06-20T00:00:00+00:00</published><updated>2024-06-20T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/oxDNA-forcefield-Development</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/oxDNA-forcefield-Development/"><![CDATA[<h2 id="forcefield-development-in-oxdna-for-cpu">Forcefield Development in oxDNA for CPU</h2>]]></content><author><name></name></author><category term="sample-posts"/><category term="plot"/><category term="linux"/><summary type="html"><![CDATA[Developing a custom forcefield in oxDNA]]></summary></entry><entry><title type="html">Software Installation and Environment Setup</title><link href="https://subhajit-roy-partho.github.io/blog/2024/cogli2-install/" rel="alternate" type="text/html" title="Software Installation and Environment Setup"/><published>2024-05-23T00:00:00+00:00</published><updated>2024-05-23T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/cogli2-install</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/cogli2-install/"><![CDATA[<h2 id="cogli-2-requirements">Cogli 2 requirements</h2> <h4 id="ubuntu-libraries">Ubuntu Libraries</h4> <ul> <li>libxrandr-dev</li> <li>libxi-dev</li> <li>libxxf86vm-dev</li> <li>libxinerama-dev</li> <li>libxcursor-dev</li> </ul> <h4 id="conda-packages">Conda packages</h4> <ul> <li>conda-forge:%3Axorg-libxxf86vm</li> </ul> <h4 id="cmake-addition-for-conda">CMAKE addition for conda</h4> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">CONDA</span><span class="p">)</span>
    <span class="n">include_directories</span><span class="p">(</span><span class="s">"~/miniconda3/include"</span><span class="p">)</span>
    <span class="n">link_directories</span><span class="p">(</span><span class="s">"~/miniconda3/lib"</span><span class="p">)</span>
<span class="n">endif</span><span class="p">(</span><span class="n">CONDA</span><span class="p">)</span>
</code></pre></div></div> <p>change the path accourding to the conda path.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="bash"/><summary type="html"><![CDATA[Software Installation and Environment Setup]]></summary></entry><entry><title type="html">Useful vim commands and shortcuts</title><link href="https://subhajit-roy-partho.github.io/blog/2024/vim-shortcut/" rel="alternate" type="text/html" title="Useful vim commands and shortcuts"/><published>2024-05-04T00:00:00+00:00</published><updated>2024-05-04T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/vim-shortcut</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/vim-shortcut/"><![CDATA[<h2 id="useful-vim-commands">Useful vim Commands</h2> <h4 id="search-and-replace">Search and Replace</h4> <ul> <li><code class="language-plaintext highlighter-rouge">:s/search/replace/</code> for current line and first occurrence.</li> <li><code class="language-plaintext highlighter-rouge">:s/search/replace/g</code> for current line and all occurrence.</li> <li><code class="language-plaintext highlighter-rouge">:%s/search/replace/g</code> for all occurance.</li> <li><code class="language-plaintext highlighter-rouge">:3,10s/search/replace/g</code> for a range of line 3 to 10</li> <li><code class="language-plaintext highlighter-rouge">:.,+4s/search/replace/g</code> from current line to next 4 lines</li> <li><code class="language-plaintext highlighter-rouge">:.,$s/search/replace/</code> from current line to end of the file.</li> <li>end <code class="language-plaintext highlighter-rouge">gc</code> to confirm each substitution.</li> <li>end <code class="language-plaintext highlighter-rouge">gi</code> to ignore case sensitivity.</li> </ul> <h4 id="comment-multiple-lines">Comment multiple lines</h4> <h4 id="fold-lines">Fold lines</h4> <p><code class="language-plaintext highlighter-rouge">:set foldmethod=indent</code> folds all the lines by indentation</p> <h2 id="neo-vim-for-c">Neo Vim for C++</h2> <ul> <li>Install Mason.nvim <ul> <li>Add <code class="language-plaintext highlighter-rouge">M.plugins = "custom.plugins"</code> to chadrc.lua under ~/.config/nvim/lua/custom</li> <li>Create a new file here using a key in file tree plugins.lua, edit the following <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">local </span>plugins <span class="o">=</span> <span class="o">{</span>
<span class="o">{</span>
  <span class="s2">"williamboman/mason.nvim"</span>,
  opts <span class="o">=</span> <span class="o">{</span>
    ensure_installed <span class="o">=</span> <span class="o">{</span>
      <span class="s2">"clangd"</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="o">}</span>
<span class="k">return </span>plugins
</code></pre></div> </div> </li> <li>Close and reopen nvim and run `MasonInstallAll</li> <li>Now add custom lspconfig to mason and final result would look like ```bash local plugins = { { “neovim/nvim-lspconfig”, config = function () require “plugins.configs.lspconfig” require “custom.configs.lspconfig” end }, { “williamboman/mason.nvim”, opts = { ensure_installed = { “clangd” } } } } return plugins</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
- create the lspconfig.lua inside custom/configs
- The files looks as given below
  ```bash
  local base = require("plugins.configs.lspconfig")
  local on_attach = base.on_attach
  local capabilities = base.capabilities
    
  local lspconfig = require("lspconfig")
    
  lspconfig.clangd.setup{
    on_attach = function (client,bufnr)
      client.server_capabilities.signatureHelpProvider=false
      on_attach(client,bufnr)
    end,
    capabilities=capabilities,
  }
</code></pre></div> </div> <ul> <li>exit and enter and do <code class="language-plaintext highlighter-rouge">TSInstall cpp</code></li> </ul> <p>Final result</p> <ul> <li>custom/configs/null-ls.lua ```bash local null_ls = require(“null_ls”)</li> </ul> <p>local opts = { sources = { null_ls.builtins.formatting.clang_format, } }</p> <p>return opts ```</p> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="bash"/><summary type="html"><![CDATA[Useful vim commands and shortcuts]]></summary></entry></feed>