<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://subhajit-roy-partho.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://subhajit-roy-partho.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-29T00:52:15+00:00</updated><id>https://subhajit-roy-partho.github.io/feed.xml</id><title type="html">blank</title><subtitle>I am a PhD student at Petr Sulc&apos;s Lab, Arizona State University. I am currently persuing computational biophysics with focus on self assembly of genetic materials. I am highly invested in developing coarse grain model of DNA which would allow us to study these assembly at a much quicker pace, otherwise impossible with atomistic approach. I also work with Machine Learning models that could even simplify our life by predicting desired properties without even going through computationally intensive simulations where ever possible. I undertook other application based project like dna cryptography and storage. </subtitle><entry><title type="html">Compiling tensorflow natively</title><link href="https://subhajit-roy-partho.github.io/blog/2023/tensorflow-compile/" rel="alternate" type="text/html" title="Compiling tensorflow natively"/><published>2023-10-09T00:00:00+00:00</published><updated>2023-10-09T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2023/tensorflow-compile</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2023/tensorflow-compile/"><![CDATA[<p>Below is a brief procedure to compile tensorflow with avx, tensorRT and cuda support.</p> <ol> <li>Clone the tensorflow repo <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/tensorflow/tensorflow.git
git checkout branch <span class="c"># not necessary but you can choose a stable branch</span>
</code></pre></div> </div> </li> <li> <p>Download tar file of cuDNN and TensorRT. Extract and paste to a suitable location. cuDNN can be pasted inside <code class="language-plaintext highlighter-rouge">/usr/local/cuda/bin</code> and <code class="language-plaintext highlighter-rouge">/usr/local/cuda/include</code> and maybe TensorRT to <code class="language-plaintext highlighter-rouge">/usr/local</code>.</p> </li> <li> <p>Follow the configuration steps, it is trivial except for a place where it asks for path of header file it can’t find. Add all of them seperated by comma for my case it was <code class="language-plaintext highlighter-rouge">/usr/local/cuda/include,/usr/local/cuda/lib64,/usr/local/cuda/nvvm/lib64,/usr/local/cuda/bin,/usr/,/usr/local/TensorRT-8.6.1.6</code>.</p> </li> <li> <p>Optional - For my case I used gcc instead of clang for cuda compilation and other compilation and default compiler was set to <code class="language-plaintext highlighter-rouge">/usr/bin/gcc</code>.</p> </li> <li> <p>Then run <code class="language-plaintext highlighter-rouge">bazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.2 --config=cuda -k //tensorflow/tools/pip_package:build_pip_package</code>. But it was creating problem so restricted myself to <code class="language-plaintext highlighter-rouge">bazel build -c opt --copt=-march=native --copt=-mfpmath=both --config=cuda -k //tensorflow/tools/pip_package:build_pip_package</code>. Wait patiently.</p> </li> <li>Compile it into pip <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
</code></pre></div> </div> </li> </ol> <p>For nightly build</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bazel-bin/tensorflow/tools/pip_package/build_pip_package <span class="nt">--nightly_flag</span> /tmp/tensorflow_pkg
</code></pre></div></div> <ol> <li>Finally install it with pip <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> /tmp/tensorflow_pkg/tensorflow-version-tags.whl
</code></pre></div> </div> </li> </ol> <h3 id="conclusion">Conclusion</h3> <p>It is fairly difficult to install it from the built. There will be something or the other that is bound to go wrong and there are hardly any solution present. With very limited knowledge of bazel it was difficult for me to modify the compilation process. I encountered numerous errors in the beginning with clang and had to shift to gcc.</p> <p>After compilation the cpu speed increased compared to the prebuilt pip installation but there wasn’t any improvement on GPU side. (I was using RTX 3060).</p> <h3 id="references">References</h3> <ul> <li>https://www.tensorflow.org/install/source</li> <li>https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="compilation"/><category term="tensorflow"/><category term="ml"/><category term="fun"/><summary type="html"><![CDATA[Compiling tensorflow natively for better performance and avx support.]]></summary></entry></feed>