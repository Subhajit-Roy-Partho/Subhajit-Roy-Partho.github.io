<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://subhajit-roy-partho.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://subhajit-roy-partho.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-21T05:09:13+00:00</updated><id>https://subhajit-roy-partho.github.io/feed.xml</id><title type="html">blank</title><subtitle>I am a PhD student at Petr Sulc&apos;s Lab, Arizona State University. I am currently persuing computational biophysics with focus on self assembly of genetic materials. I am highly invested in developing coarse grain model of DNA which would allow us to study these assembly at a much quicker pace, otherwise impossible with atomistic approach. I also work with Machine Learning models that could even simplify our life by predicting desired properties without even going through computationally intensive simulations where ever possible. I undertook other application based project like dna cryptography and storage. </subtitle><entry><title type="html">oxDNA Simulatiion Guide</title><link href="https://subhajit-roy-partho.github.io/blog/2025/oxDNA-Simulation-Setup/" rel="alternate" type="text/html" title="oxDNA Simulatiion Guide"/><published>2025-08-20T00:00:00+00:00</published><updated>2025-08-20T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2025/oxDNA-Simulation-Setup</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2025/oxDNA-Simulation-Setup/"><![CDATA[<h2 id="oxdna-installations">oxDNA Installations</h2> <p>For oxDNA installation and running it one need to have a C, C++ compiler like gcc,g++, git to download the code, cmake and make to build it and preferably python for oxDNA analysis toolbar and oxpy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd oxDNA         # enter the oxDNA folder
mkdir build      # create a new build folder. It is good practice to compile out-of-source
cd build
cmake .. -DCUDA=ON -DPYTHON=ON -CMAKE_BUILD_TYPE=Release #For cpu only installation -DCUDA=OFF and can omit -DPYTHON completely
make -j$nproc
</code></pre></div></div> <p>The binaries will be in build/bin folder. It is recommended to add it in PATH which can be easily accompolished with <code class="language-plaintext highlighter-rouge">echo "PATH="$PATH:/location/to/build/bin" &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</code>.</p> <p>To run a restrained simulation it is advisable to run it with hydrogen bond restrains, which can be generated in oxview, using the following steps:</p> <p>Dynamics -&gt; Forces -&gt; Set stiffness = ( something between 2 to 5) and Relaxed distance 1.2 -&gt; create from base pair -&gt; Yes.</p> <p>It will take some time to search the base pairs and will generarte restrains for all the base pairs. Save the structure top and dat file and also the force.txt file as well.</p> <p>These structure could be simulated with MC then MD with restrains and finally production run without any restrains or max backbone force.</p> <h4 id="mc-simulation-setup">MC Simulation setup</h4> <p>For simualtion we would need the .top, .dat and .txt force file and need to write a input file as given below.</p> <h4 id="md-simulation-1---restrains--max-backbone-force">MD Simulation 1 - Restrains + Max Backbone Force</h4> <h4 id="md-simulation-2---high-max-backbone-force">MD Simulation 2 - High Max Backbone Force</h4> <h4 id="md-simulation---production">MD Simulation - Production</h4>]]></content><author><name></name></author><category term="sample-posts"/><category term="compilation"/><category term="tensorflow"/><category term="ml"/><category term="fun"/><summary type="html"><![CDATA[A simple step by step guide to simulation oxDNA with different relaxation technique.]]></summary></entry><entry><title type="html">Linux system setup</title><link href="https://subhajit-roy-partho.github.io/blog/2025/linux-system-setup/" rel="alternate" type="text/html" title="Linux system setup"/><published>2025-05-23T00:00:00+00:00</published><updated>2025-05-23T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2025/linux-system-setup</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2025/linux-system-setup/"><![CDATA[<h2 id="basic-installations">Basic Installations</h2> <div class="tabs-container"> <div class="tab-buttons"> <button class="tab-button active" onclick="openTab(event, 'arch')">Arch Linux</button> <button class="tab-button" onclick="openTab(event, 'debian')">Debian/Ubuntu</button> <button class="tab-button" onclick="openTab(event, 'fedora')">Fedora</button> </div> <div id="arch" class="tab-content" style="display:block;"> <h3>Arch Linux</h3> <pre><code class="language-bash">
    sudo pacman -Syu gcc make cmake python3 python-pip git wget nvim zsh cloudflared openssh rsync rclone
    sudo chsh -s $(which zsh) $(whoami)

# Then, ensure visudo has:
# %wheel ALL=(ALL:ALL) ALL
    </code></pre> </div> <div id="debian" class="tab-content"> <h3>Debian / Ubuntu</h3> <pre><code class="language-bash">
# To add 'myuser' to the 'sudo' group
sudo usermod -aG sudo myuser
    </code></pre> </div> <div id="fedora" class="tab-content"> <h3>Fedora / RHEL / CentOS</h3> <pre><code class="language-bash">
# To add 'myuser' to the 'wheel' group
sudo usermod -aG wheel myuser

# Typically, wheel group is already configured in /etc/sudoers
    </code></pre> </div> </div> <style>.tabs-container{border:1px solid #ccc;border-radius:5px;overflow:hidden;margin-bottom:20px}.tab-buttons{background-color:#f1f1f1;overflow:hidden;border-bottom:1px solid #ccc}.tab-button{background-color:inherit;float:left;border:0;outline:0;cursor:pointer;padding:10px 15px;transition:.3s;font-size:1em}.tab-button:hover{background-color:#ddd}.tab-button.active{background-color:#ccc;border-bottom:2px solid #007bff}.tab-content{display:none;padding:15px;border-top:0}.tab-content h3{margin-top:0}.tab-content pre{background-color:#f9f9f9;border:1px solid #eee;padding:10px;border-radius:4px;overflow-x:auto}.tab-content code{font-family:Consolas,"Courier New",monospace}</style> <script>function openTab(e,t){var a,n,l;for(n=document.getElementsByClassName("tab-content"),a=0;a<n.length;a++)n[a].style.display="none";for(l=document.getElementsByClassName("tab-button"),a=0;a<l.length;a++)l[a].className=l[a].className.replace(" active","");document.getElementById(t).style.display="block",e.currentTarget.className+=" active"}</script> <h2 id="oh-my-zsh-installation">oh-my-zsh installation</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## Install oh-my-zsh</span>
sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh <span class="nt">-O</span> -<span class="si">)</span><span class="s2">"</span>

<span class="c">## Install plugins</span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-history-substring-search <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-history-substring-search

<span class="c">## Replace the default plugins with the following</span>
<span class="nb">sed</span> <span class="nt">-i</span>.bak <span class="s1">'/^plugins=.*/c\
plugins=(\
  git\
  zsh-syntax-highlighting\
  zsh-autosuggestions\
  zsh-history-substring-search\
)'</span> ~/.zshrc
</code></pre></div></div> <h2 id="generate-ssh-keys">Generate SSH keys</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"pc"</span>
<span class="nb">cat</span> ~/.ssh/id_ed25519.pub
</code></pre></div></div> <h2 id="add-servers">Add servers</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.ssh
<span class="nb">echo</span> <span class="s2">"Host gila
        Hostname gila.navraj.me
        User gila
        Port 22
        ProxyCommand cloudflared access ssh --hostname %h
Host sol
        Hostname sol.asu.edu
        User sroy85
        Port 22
        ProxyJump gila"</span> <span class="o">&gt;&gt;</span> ~/.ssh/config
    
</code></pre></div></div> <h2 id="add-zshrc-functions">Add zshrc functions</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mo<span class="o">()</span> <span class="o">{</span>
  <span class="c"># Check if an argument was provided</span>
  <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Usage: mo &lt;directory_name&gt;"</span>
    <span class="k">return </span>1 <span class="c"># Indicate an error</span>
  <span class="k">fi</span>

  <span class="c"># Attempt to create the directory.</span>
  <span class="c"># -p: no error if existing, make parent directories as needed</span>
  <span class="c"># --: ensures that $1 isn't misinterpreted as an option if it starts with '-'</span>
  <span class="k">if </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nt">--</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="p">;</span> <span class="k">then</span>
    <span class="c"># If mkdir was successful, try to cd into it</span>
    <span class="k">if </span><span class="nb">cd</span> <span class="nt">--</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
      return </span>0 <span class="c"># Success</span>
    <span class="k">else
      </span><span class="nb">echo</span> <span class="s2">"Error: Successfully created directory '</span><span class="nv">$1</span><span class="s2">', but could not cd into it."</span> <span class="o">&gt;</span>&amp;2
      <span class="k">return </span>1 <span class="c"># Indicate an error</span>
    <span class="k">fi
  else</span>
    <span class="c"># mkdir failed. mkdir itself usually prints an error.</span>
    <span class="c"># We can add a generic one too.</span>
    <span class="nb">echo</span> <span class="s2">"Error: Could not create directory '</span><span class="nv">$1</span><span class="s2">'."</span> <span class="o">&gt;</span>&amp;2
    <span class="k">return </span>1 <span class="c"># Indicate an error</span>
  <span class="k">fi</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="compilation"/><category term="tensorflow"/><category term="ml"/><category term="fun"/><summary type="html"><![CDATA[Code to setup complete linux system from scratch.]]></summary></entry><entry><title type="html">All atom MD simulation of DNA with small molecule</title><link href="https://subhajit-roy-partho.github.io/blog/2024/all-atom-DNA-simulation/" rel="alternate" type="text/html" title="All atom MD simulation of DNA with small molecule"/><published>2024-10-01T00:00:00+00:00</published><updated>2024-10-01T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/all-atom-DNA-simulation</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/all-atom-DNA-simulation/"><![CDATA[<h2 id="avogadro">Avogadro</h2>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[A description on how to simulate DNA duplex with small molecules covalently attached at different positions]]></summary></entry><entry><title type="html">ZSH terminal</title><link href="https://subhajit-roy-partho.github.io/blog/2024/zsh-terminal/" rel="alternate" type="text/html" title="ZSH terminal"/><published>2024-09-15T00:00:00+00:00</published><updated>2024-09-15T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/zsh-terminal</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/zsh-terminal/"><![CDATA[<ul> <li>Install oh my zsh <code class="language-plaintext highlighter-rouge">sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code>.</li> <li>Change theme to avit in ~/.zshrc</li> <li>Plugins: <ul> <li>zsh-syntax-highlighting <code class="language-plaintext highlighter-rouge">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code></li> <li>zsh-autosuggestions <code class="language-plaintext highlighter-rouge">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code></li> <li>add the puligins to</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">plugins</span><span class="o">=(</span>git
  zsh-syntax-highlighting
  zsh-autosuggestions
  <span class="o">)</span>
    
</code></pre></div> </div> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[Ram up the terminal.]]></summary></entry><entry><title type="html">ARM Linux Server</title><link href="https://subhajit-roy-partho.github.io/blog/2024/ARMserver/" rel="alternate" type="text/html" title="ARM Linux Server"/><published>2024-09-07T00:00:00+00:00</published><updated>2024-09-07T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/ARMserver</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/ARMserver/"><![CDATA[<h3 id="important-notes">Important Notes</h3> <ul> <li>Welcome message is in file <code class="language-plaintext highlighter-rouge">/etc/motd</code>, and ASCII art looks great in there.</li> <li>OS choices <ol> <li>Debian</li> <li>Fedora</li> <li>Arch</li> <li>Ubuntu (May even damage firmware)</li> </ol> </li> </ul> <h3 id="useful-software">Useful Software</h3> <h5 id="desktop-environments">Desktop Environments</h5> <ul> <li>Xfce is one of the best and easy to configure desktop environment.</li> <li>To install it <code class="language-plaintext highlighter-rouge">sudo apt install xfce4</code></li> <li>to start it <code class="language-plaintext highlighter-rouge">startxfce4</code> from tty terminal.</li> </ul> <h3 id="fixes">Fixes</h3> <h5 id="slurm-gpu-segregation-fix">SLURM GPU segregation fix</h5> <p>Slurm uses nvml to detect the number of gpus, segregate them during running, and this api was not working for my case.</p> <ul> <li>Find the library location <code class="language-plaintext highlighter-rouge">sudo find / -name "libnvidia-ml.so"</code> , for my case this was <code class="language-plaintext highlighter-rouge">/usr/local/cuda-12.2/targets/sbsa-linux/lib/stubs/libnvidia-ml.so</code></li> <li>Copy this to <code class="language-plaintext highlighter-rouge">/usr/lib</code></li> <li>Add header location to <code class="language-plaintext highlighter-rouge">/etc/profile</code> , for my case it was <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">C_INCLUDE_PATH</span><span class="o">=</span><span class="s2">"/usr/local/cuda-12.2/targets/sbsa-linux/include:</span><span class="nv">$C_INCLUDE_PATH</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">CPLUS_INCLUDE_PATH</span><span class="o">=</span><span class="s2">"/usr/local/cuda-12.2/targets/sbsa-linux/include:</span><span class="nv">$CPLUS_INCLUDE_PATH</span><span class="s2">"</span>
</code></pre></div> </div> </li> <li>By default <code class="language-plaintext highlighter-rouge">/usr/lib</code> should be in ldconfig still one can add that in <code class="language-plaintext highlighter-rouge">/etc/ld.so.conf.d . sudo ldconfig</code></li> <li>Also here is a c code to check nvml, use <code class="language-plaintext highlighter-rouge">gcc nvml.c -lnvidia-ml; ./a.out</code>. If it outputs the correct number of gpu, I guess everything should be configured.</li> </ul> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;nvml.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">nvmlReturn_t</span> <span class="n">result</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">device_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// Initialize NVML library</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nvmlInit</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NVML_SUCCESS</span> <span class="o">!=</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to initialize NVML: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">nvmlErrorString</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Get the number of GPUs</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nvmlDeviceGetCount</span><span class="p">(</span><span class="o">&amp;</span><span class="n">device_count</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NVML_SUCCESS</span> <span class="o">!=</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to get device count: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">nvmlErrorString</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
        <span class="n">nvmlShutdown</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Number of GPUs detected: %u</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">device_count</span><span class="p">);</span>

    <span class="c1">// Clean up NVML library</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">nvmlShutdown</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">NVML_SUCCESS</span> <span class="o">!=</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Failed to shutdown NVML: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">nvmlErrorString</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="nvidia-kernel-stuff">Nvidia kernel stuff</h3> <ul> <li>To rebuild the kernel simply <code class="language-plaintext highlighter-rouge">sudo akmods --force</code></li> <li>Logs should be in <code class="language-plaintext highlighter-rouge">/var/cache/akmods/nvidia/{Kernel Version}</code></li> <li>Check kernel version with <code class="language-plaintext highlighter-rouge">uname -srm</code></li> </ul> <h3 id="bad-ideas">Bad ideas</h3> <ul> <li>Never change /usr/bin/gcc to /usr/bin/gcc-13 from default gcc-14 (or whatever your version is). Same for g++. It breaks core system files including nvidia drivers akmod.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[ARM Linux Server]]></summary></entry><entry><title type="html">Mouse and Keyboard share</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Mouse-keyboard-share/" rel="alternate" type="text/html" title="Mouse and Keyboard share"/><published>2024-09-07T00:00:00+00:00</published><updated>2024-09-07T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Mouse-keyboard-share</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Mouse-keyboard-share/"><![CDATA[<ul> <li>Install it using package manager or build it from the github repo.</li> <li>Generate the self signed SSL key at <code class="language-plaintext highlighter-rouge">.local/share/barrier/SSL</code> this should be either in <code class="language-plaintext highlighter-rouge">/home/$USER</code> or <code class="language-plaintext highlighter-rouge">/home/$USER/snap/barrier-*/2</code>.</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="s2">"SSL path"</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> Fingerprints
openssl req <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-days</span> 365 <span class="nt">-subj</span> /CN<span class="o">=</span>barrier <span class="nt">-newkey</span> rsa:4096 <span class="nt">-keyout</span> Barrier.pem <span class="nt">-out</span> Barrier.pem
openssl x509 <span class="nt">-fingerprint</span> <span class="nt">-sha256</span> <span class="nt">-noout</span> <span class="nt">-in</span> Barrier.pem <span class="o">&gt;</span> Fingerprints/Local.txt
<span class="nb">sed</span> <span class="nt">-e</span> <span class="s2">"s/.*=/v2:sha256:/"</span> <span class="nt">-i</span> Fingerprints/Local.txt
</code></pre></div></div> <ul> <li>Set the server config by draging in new pc to left or right.</li> <li>Start the server.</li> <li>Start the client with the server IP. If everything is right client would flash server SSL and in next message would prompt configuration is ready.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[A short description on how to share mouse and keyboard using Barrier open source software.]]></summary></entry><entry><title type="html">ZSH initial setup</title><link href="https://subhajit-roy-partho.github.io/blog/2024/zsh/" rel="alternate" type="text/html" title="ZSH initial setup"/><published>2024-09-07T00:00:00+00:00</published><updated>2024-09-07T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/zsh</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/zsh/"><![CDATA[<h2 id="zsh">ZSH</h2> <ul> <li>Install oh-my-zsh <code class="language-plaintext highlighter-rouge">sh -c "$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"</code></li> <li>Update in ~/.zshrc file</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">"avit"</span>
<span class="nv">plugins</span><span class="o">=(</span>
  git
  zsh-syntax-highlighting
  zsh-autosuggestions
  zsh-history-substring-search
<span class="o">)</span>
</code></pre></div></div> <ul> <li> <p>Install syntax-highlight using `</p> </li> <li> <p>Install autosuggestion using <code class="language-plaintext highlighter-rouge">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code></p> </li> <li> <p>Install zsh history substring search <code class="language-plaintext highlighter-rouge">git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/</code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlightingzsh-history-substring-search`</p> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[A short description on how to share mouse and keyboard using Barrier open source software.]]></summary></entry><entry><title type="html">C++ Tips</title><link href="https://subhajit-roy-partho.github.io/blog/2024/C++/" rel="alternate" type="text/html" title="C++ Tips"/><published>2024-08-17T00:00:00+00:00</published><updated>2024-08-17T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/C++</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/C++/"><![CDATA[<h4 id="ofstream-file-opening-parameters">Ofstream file opening parameters</h4> <ul> <li><code class="language-plaintext highlighter-rouge">std::ios::ate</code> - full file is available for writting and the pointer will be at the end of the file in the beginning.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::app</code> - starts writting at the end of the file and existing porting is non writable.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::trunc</code> - will delete everything in the file and starts writting afresh.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::out</code> - used to creat a file if doesn’t exists, writting behaviour is dependant on <code class="language-plaintext highlighter-rouge">trunc</code> or <code class="language-plaintext highlighter-rouge">ate</code> etc.</li> <li><code class="language-plaintext highlighter-rouge">std::ios::binary</code> - most useful mode to generate binary files.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[C++ Tips]]></summary></entry><entry><title type="html">Docker Commands</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Docker/" rel="alternate" type="text/html" title="Docker Commands"/><published>2024-08-17T00:00:00+00:00</published><updated>2024-08-17T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Docker</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Docker/"><![CDATA[<h3 id="run-container">Run Container</h3> <ul> <li><code class="language-plaintext highlighter-rouge">docker run --rm</code> delets the containers after the run is finished.</li> <li><code class="language-plaintext highlighter-rouge">docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi</code> - run using nvidia gpu <strong>all</strong> can be substituted with <strong>device=0</strong> to select a specific gpu.</li> </ul> <h3 id="container-commands">Container Commands</h3> <ul> <li><code class="language-plaintext highlighter-rouge">docker container ls -a</code> list all the containers</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="coding"/><summary type="html"><![CDATA[Docker commands]]></summary></entry><entry><title type="html">GNUplot commands</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Gnuplot/" rel="alternate" type="text/html" title="GNUplot commands"/><published>2024-06-20T00:00:00+00:00</published><updated>2024-06-20T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Gnuplot</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Gnuplot/"><![CDATA[<h4 id="plot-x-as-123-and-y-axis">Plot x as 1,2,3….. and y axis</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plot <span class="s2">"data.txt"</span> u <span class="o">(</span><span class="nv">$0</span><span class="o">)</span>:4 title <span class="s2">"Plotting with x innumeration"</span>
</code></pre></div></div> <ul> <li>($0) represents the line number.</li> </ul> <h4 id="plot-histogram">Plot histogram</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set </span>terminal png
<span class="nb">set </span>output <span class="s1">'histogram.png'</span>
<span class="nb">set </span>style data histogram
<span class="nb">set </span>style fill solid
<span class="nb">set </span>xlabel <span class="s1">'Angles(°)'</span>
<span class="nb">set </span>ylabel <span class="s1">'Normalized Frequency'</span>
<span class="nb">set </span>title <span class="s1">'Angles distribution for α'</span>
bin_width <span class="o">=</span> 1
bin<span class="o">(</span>x, width<span class="o">)</span> <span class="o">=</span> width <span class="k">*</span> floor<span class="o">(</span>x / width<span class="o">)</span> + bin_width / 2.0
stats <span class="s1">'angles.txt'</span> nooutput
total_points <span class="o">=</span> STATS_records
plot <span class="s1">'angles.txt'</span> using <span class="o">(</span>bin<span class="o">(</span><span class="nv">$1</span>, bin_width<span class="o">))</span>:<span class="o">(</span>1.0/total_points<span class="o">)</span> smooth freq with boxes lc rgb <span class="s1">'blue'</span> notitle
</code></pre></div></div> <ul> <li>above <code class="language-plaintext highlighter-rouge">bin_width</code> controls the sampling density or width of each bin.</li> <li>dividing by <code class="language-plaintext highlighter-rouge">total_points</code> normalizes the plot, remove this for unnormalized graphs</li> <li>the input files <code class="language-plaintext highlighter-rouge">angles.txt</code> is assumed to have single column containing all the data.</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="plot"/><category term="linux"/><summary type="html"><![CDATA[GNUplot useful commands]]></summary></entry></feed>