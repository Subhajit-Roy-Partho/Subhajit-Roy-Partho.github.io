<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://subhajit-roy-partho.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://subhajit-roy-partho.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-13T00:06:50+00:00</updated><id>https://subhajit-roy-partho.github.io/feed.xml</id><title type="html">blank</title><subtitle>I am a PhD student at Petr Sulc&apos;s Lab, Arizona State University. I am currently persuing computational biophysics with focus on self assembly of genetic materials. I am highly invested in developing coarse grain model of DNA which would allow us to study these assembly at a much quicker pace, otherwise impossible with atomistic approach. I also work with Machine Learning models that could even simplify our life by predicting desired properties without even going through computationally intensive simulations where ever possible. I undertook other application based project like dna cryptography and storage. </subtitle><entry><title type="html">Cryosparc management</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Cryospark/" rel="alternate" type="text/html" title="Cryosparc management"/><published>2024-02-12T00:00:00+00:00</published><updated>2024-02-12T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Cryospark</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Cryospark/"><![CDATA[<h3 id="installation">Installation</h3> <ul> <li>Request a <a href="http://cryosparc.com/download">license</a>. It usually take them 2 business them to issue you a license.</li> <li>In .bashrc add <code class="language-plaintext highlighter-rouge">export LICENSE_ID="&lt;license_id&gt;"</code>.</li> <li>Download the files to desire location using</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -L https://get.cryosparc.com/download/master-latest/$LICENSE_ID -o cryosparc_master.tar.gz
curl -L https://get.cryosparc.com/download/worker-latest/$LICENSE_ID -o cryosparc_worker.tar.gz
</code></pre></div></div> <p>For Single PC setup only cryospac master is required.</p> <ul> <li>Extract the tar files using <code class="language-plaintext highlighter-rouge">tar -xzvf cryosparc_master.tar.gz</code>.</li> <li>Setup a database location, usually for clusters scratch space is best for example <code class="language-plaintext highlighter-rouge">/scratch/cryo/cryoDB</code>.</li> <li>Go to the extracted folder then install using <code class="language-plaintext highlighter-rouge">./install.sh --license $LICENSE_ID --hostname hostname --dbpath /scratch/cryo/cryoDB --port 61000</code>.</li> </ul> <p>The hostname can be obtained by typing <code class="language-plaintext highlighter-rouge">hostname</code>. In cluster system this will change depending upon the node allocation. In such situation the nodename needs to be updated in <code class="language-plaintext highlighter-rouge">config.sh</code>. Also adding <code class="language-plaintext highlighter-rouge">export CRYOSPARC_FORCE_HOSTNAME=true</code> to config.sh could also help.</p> <ul> <li>Start the cryosparc using <code class="language-plaintext highlighter-rouge">bin/cryosparcm start</code>. First time it will take some time to configure, from next time it would be fast.</li> <li>Create the user using <code class="language-plaintext highlighter-rouge">bin/cryosparcm createuser --email "email@email.com" --username "user1" --firstname "user" --lastname "1" --password "somepass"</code></li> <li>Elevate user permission to admin using <code class="language-plaintext highlighter-rouge">cryosparcm updateuser --email "&lt;email address&gt;" --admin "true"</code>.</li> <li>Now cryosparc is ready for use at port 61000. To open a <code class="language-plaintext highlighter-rouge">ssh port use ssh -N -L 61000:cg001.sol.asu.edu:61000 user@sol.asu.edu</code> where cg001 is the id of the compute node in the cluster. If it is a personal computer this step can be ignored.</li> <li>Access the cryosparc in the browser at localhost:61000</li> </ul> <h3 id="references">References</h3> <ul> <li>https://guide.cryosparc.com/setup-configuration-and-management/how-to-download-install-and-configure/downloading-and-installing-cryosparc</li> <li>https://discuss.cryosparc.com/t/no-admin-account-upon-install-create-admin-account-via-cli/10530/2</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="Cryo"/><category term="TEM"/><summary type="html"><![CDATA[Installation and management of Cryosparc]]></summary></entry><entry><title type="html">Disk Management</title><link href="https://subhajit-roy-partho.github.io/blog/2024/Gparted-cli/" rel="alternate" type="text/html" title="Disk Management"/><published>2024-01-23T00:00:00+00:00</published><updated>2024-01-23T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/Gparted-cli</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/Gparted-cli/"><![CDATA[<p>Useful parted cli commands:</p> <ul> <li><code class="language-plaintext highlighter-rouge">print</code> - print the full configuration.</li> <li><code class="language-plaintext highlighter-rouge">select DEVICE</code> - to change to a different device and edit it.</li> <li><code class="language-plaintext highlighter-rouge">mklabel gpt</code> - to create a gpt label for the partition</li> <li><code class="language-plaintext highlighter-rouge">mkpart primary btrfs 1MiB 100%</code> - to create a partition of type primary with format btrfs starting at 1MiB and ending at 100% or end of the disk.</li> <li> <p>`` Useful other disk management commands:</p> </li> <li><code class="language-plaintext highlighter-rouge">lsblk</code> and <code class="language-plaintext highlighter-rouge">fdisk -l</code> shows disk configuration for all the disks.</li> <li><code class="language-plaintext highlighter-rouge">sudo mkfs.btrfs -f /dev/sda1</code> to create the final btrfs partition for sda1 partition. This is not always needed if parted does it by default.</li> <li><code class="language-plaintext highlighter-rouge">sudo blkid</code> to obtain all the uuid of the disks.</li> <li><code class="language-plaintext highlighter-rouge">/etc/fstab</code> fstab file needs to be appended with the new partition configuration if one wants to mount the partition automatically during restart.</li> </ul> <p>Validate settings:</p> <ul> <li><code class="language-plaintext highlighter-rouge">df -h</code> to show all the mount location.</li> </ul> <p>User management:</p> <ul> <li><code class="language-plaintext highlighter-rouge">sudo useradd -m -d /home/subho -s /bin/bash -G standard,admin subho</code> to add user subho with home location /home/subho, default shell as bash and add to group standard,admin.</li> <li><code class="language-plaintext highlighter-rouge">sudo passwd subho</code> to change or create password for user subho.</li> </ul> <h3 id="conclusion">Conclusion</h3> <p>parted cli is the most powerful partition tool available for terminal user. Meticious use could help save lot of time.</p> <h3 id="references">References</h3> <ul> <li>https://www.redhat.com/sysadmin/resize-lvm-simple</li> <li>https://kb.vander.host/disk-management/how-to-resize-expand-an-ubuntu-lvm-disk/</li> <li>https://fedoramagazine.org/choose-between-btrfs-and-lvm-ext4/</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="disk"/><category term="partitions"/><summary type="html"><![CDATA[Useful disk management commands]]></summary></entry><entry><title type="html">LVM management</title><link href="https://subhajit-roy-partho.github.io/blog/2024/LVM-disk/" rel="alternate" type="text/html" title="LVM management"/><published>2024-01-15T00:00:00+00:00</published><updated>2024-01-15T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/LVM-disk</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/LVM-disk/"><![CDATA[<p>I will discuss basic operation that might be helpful.</p> <ol> <li>Extend partition size for a LVM partitons.</li> </ol> <p>Check disk configuration using the following commands <code class="language-plaintext highlighter-rouge">fdisk -l</code>, <code class="language-plaintext highlighter-rouge">lsblk</code>, <code class="language-plaintext highlighter-rouge">vds</code>, <code class="language-plaintext highlighter-rouge">pvs</code>. To make changes to the virtual partition one need to change the /dev/mapper section no need to change any properties of /dev/sd* or /dev/nvme*. Using <code class="language-plaintext highlighter-rouge">lvextend --size *size*G /dev/mapper/*partitionName*</code> for my case this was <code class="language-plaintext highlighter-rouge">lvextend --size 236G /dev/mapper/ubuntu--vg-ubuntu--lv</code>. Now update the filesystem <code class="language-plaintext highlighter-rouge">resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv</code>. Using <code class="language-plaintext highlighter-rouge">df -h \ </code> one can verify if the changes have been implemented.</p> <h3 id="conclusion">Conclusion</h3> <p>LVM is great tool for those who are looking forward to robust but less fancy dynamic partition management system. BTRFS is much simplier and easier to implement but CPU usage can rise compared to LVM-ext4, hence many prefer LVM for server systems.</p> <h3 id="references">References</h3> <ul> <li>https://www.redhat.com/sysadmin/resize-lvm-simple</li> <li>https://kb.vander.host/disk-management/how-to-resize-expand-an-ubuntu-lvm-disk/</li> <li>https://fedoramagazine.org/choose-between-btrfs-and-lvm-ext4/</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="disk"/><category term="partitions"/><summary type="html"><![CDATA[Handling LVM partitions]]></summary></entry><entry><title type="html">SLURM</title><link href="https://subhajit-roy-partho.github.io/blog/2024/SLURM/" rel="alternate" type="text/html" title="SLURM"/><published>2024-01-15T00:00:00+00:00</published><updated>2024-01-15T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2024/SLURM</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2024/SLURM/"><![CDATA[<h3 id="commands">Commands</h3> <ul> <li>Show fairshare usage for various queue and partitions <code class="language-plaintext highlighter-rouge">sacctmgr show qos</code>.</li> <li>Show user’s fairshare score <code class="language-plaintext highlighter-rouge">sshare -l | grep usernameOrGrpName</code>.</li> </ul> <h3 id="conclusion">Conclusion</h3> <p>SLURM is one of the best open source workload manager and is highly used in modern servers.</p> <h3 id="references">References</h3> <ul> <li>https://slurm.schedmd.com/classic_fair_share.html</li> <li>https://slurm.schedmd.com/fair_tree.html</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="linux"/><category term="slurm"/><summary type="html"><![CDATA[Slurm commands and Management]]></summary></entry><entry><title type="html">Compiling tensorflow natively</title><link href="https://subhajit-roy-partho.github.io/blog/2023/tensorflow-compile/" rel="alternate" type="text/html" title="Compiling tensorflow natively"/><published>2023-10-09T00:00:00+00:00</published><updated>2023-10-09T00:00:00+00:00</updated><id>https://subhajit-roy-partho.github.io/blog/2023/tensorflow-compile</id><content type="html" xml:base="https://subhajit-roy-partho.github.io/blog/2023/tensorflow-compile/"><![CDATA[<p>Below is a brief procedure to compile tensorflow with avx, tensorRT and cuda support.</p> <ol> <li>Clone the tensorflow repo <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/tensorflow/tensorflow.git
git checkout branch <span class="c"># not necessary but you can choose a stable branch</span>
</code></pre></div> </div> </li> <li> <p>Download tar file of cuDNN and TensorRT. Extract and paste to a suitable location. cuDNN can be pasted inside <code class="language-plaintext highlighter-rouge">/usr/local/cuda/bin</code> and <code class="language-plaintext highlighter-rouge">/usr/local/cuda/include</code> and maybe TensorRT to <code class="language-plaintext highlighter-rouge">/usr/local</code>.</p> </li> <li> <p>Follow the configuration steps, it is trivial except for a place where it asks for path of header file it can’t find. Add all of them seperated by comma for my case it was <code class="language-plaintext highlighter-rouge">/usr/local/cuda/include,/usr/local/cuda/lib64,/usr/local/cuda/nvvm/lib64,/usr/local/cuda/bin,/usr/,/usr/local/TensorRT-8.6.1.6</code>.</p> </li> <li> <p>Optional - For my case I used gcc instead of clang for cuda compilation and other compilation and default compiler was set to <code class="language-plaintext highlighter-rouge">/usr/bin/gcc</code>.</p> </li> <li> <p>Then run <code class="language-plaintext highlighter-rouge">bazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.2 --config=cuda -k //tensorflow/tools/pip_package:build_pip_package</code>. But it was creating problem so restricted myself to <code class="language-plaintext highlighter-rouge">bazel build -c opt --copt=-march=native --copt=-mfpmath=both --config=cuda -k //tensorflow/tools/pip_package:build_pip_package</code>. Wait patiently.</p> </li> <li>Compile it into pip <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
</code></pre></div> </div> </li> </ol> <p>For nightly build</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bazel-bin/tensorflow/tools/pip_package/build_pip_package <span class="nt">--nightly_flag</span> /tmp/tensorflow_pkg
</code></pre></div></div> <ol> <li>Finally install it with pip <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> /tmp/tensorflow_pkg/tensorflow-version-tags.whl
</code></pre></div> </div> </li> </ol> <h3 id="conclusion">Conclusion</h3> <p>It is fairly difficult to install it from the built. There will be something or the other that is bound to go wrong and there are hardly any solution present. With very limited knowledge of bazel it was difficult for me to modify the compilation process. I encountered numerous errors in the beginning with clang and had to shift to gcc.</p> <p>After compilation the cpu speed increased compared to the prebuilt pip installation but there wasn’t any improvement on GPU side. (I was using RTX 3060).</p> <h3 id="references">References</h3> <ul> <li>https://www.tensorflow.org/install/source</li> <li>https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="compilation"/><category term="tensorflow"/><category term="ml"/><category term="fun"/><summary type="html"><![CDATA[Compiling tensorflow natively for better performance and avx support.]]></summary></entry></feed>